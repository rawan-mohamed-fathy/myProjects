
stopwatch.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001a72  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  00001a72  00001b06  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000c  00800068  00800068  00001b0e  2**0
                  ALLOC
  3 .stab         00000fe4  00000000  00000000  00001b10  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000008d7  00000000  00000000  00002af4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  000033cb  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  0000350b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  0000367b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  000052c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  000061af  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  00006f5c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  000070bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  00007349  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00007b17  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 21 06 	jmp	0xc42	; 0xc42 <__vector_1>
       8:	0c 94 3f 06 	jmp	0xc7e	; 0xc7e <__vector_2>
       c:	0c 94 60 06 	jmp	0xcc0	; 0xcc0 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 a3 05 	jmp	0xb46	; 0xb46 <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a8 e6       	ldi	r26, 0x68	; 104
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
      68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
      6a:	a4 37       	cpi	r26, 0x74	; 116
      6c:	b1 07       	cpc	r27, r17
      6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>

00000070 <__do_copy_data>:
      70:	10 e0       	ldi	r17, 0x00	; 0
      72:	a0 e6       	ldi	r26, 0x60	; 96
      74:	b0 e0       	ldi	r27, 0x00	; 0
      76:	e2 e7       	ldi	r30, 0x72	; 114
      78:	fa e1       	ldi	r31, 0x1A	; 26
      7a:	02 c0       	rjmp	.+4      	; 0x80 <.do_copy_data_start>

0000007c <.do_copy_data_loop>:
      7c:	05 90       	lpm	r0, Z+
      7e:	0d 92       	st	X+, r0

00000080 <.do_copy_data_start>:
      80:	a8 36       	cpi	r26, 0x68	; 104
      82:	b1 07       	cpc	r27, r17
      84:	d9 f7       	brne	.-10     	; 0x7c <.do_copy_data_loop>
      86:	0e 94 b1 0b 	call	0x1762	; 0x1762 <main>
      8a:	0c 94 37 0d 	jmp	0x1a6e	; 0x1a6e <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 00 0d 	jmp	0x1a00	; 0x1a00 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 1c 0d 	jmp	0x1a38	; 0x1a38 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 0c 0d 	jmp	0x1a18	; 0x1a18 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 28 0d 	jmp	0x1a50	; 0x1a50 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 0c 0d 	jmp	0x1a18	; 0x1a18 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 28 0d 	jmp	0x1a50	; 0x1a50 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 00 0d 	jmp	0x1a00	; 0x1a00 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 1c 0d 	jmp	0x1a38	; 0x1a38 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 0c 0d 	jmp	0x1a18	; 0x1a18 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 28 0d 	jmp	0x1a50	; 0x1a50 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 0c 0d 	jmp	0x1a18	; 0x1a18 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 28 0d 	jmp	0x1a50	; 0x1a50 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 0c 0d 	jmp	0x1a18	; 0x1a18 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 28 0d 	jmp	0x1a50	; 0x1a50 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 10 0d 	jmp	0x1a20	; 0x1a20 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 2c 0d 	jmp	0x1a58	; 0x1a58 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <__vector_7>:
/******************************************ISR functions******************************************/
//ISR(TIMER1_COMPA_vect) {
//	timer_flag =1;
//}

ISR(TIMER1_COMPA_vect) {
     b46:	1f 92       	push	r1
     b48:	0f 92       	push	r0
     b4a:	0f b6       	in	r0, 0x3f	; 63
     b4c:	0f 92       	push	r0
     b4e:	11 24       	eor	r1, r1
     b50:	8f 93       	push	r24
     b52:	af 93       	push	r26
     b54:	bf 93       	push	r27
     b56:	ef 93       	push	r30
     b58:	ff 93       	push	r31
     b5a:	df 93       	push	r29
     b5c:	cf 93       	push	r28
     b5e:	cd b7       	in	r28, 0x3d	; 61
     b60:	de b7       	in	r29, 0x3e	; 62

		if (toggle_to_count_down_mode == 0)  //by default count up mode select
     b62:	80 91 6b 00 	lds	r24, 0x006B
     b66:	88 23       	and	r24, r24
     b68:	39 f5       	brne	.+78     	; 0xbb8 <__vector_7+0x72>
		{
			seconds++; 						//every compare match increment number of seconds
     b6a:	80 91 68 00 	lds	r24, 0x0068
     b6e:	8f 5f       	subi	r24, 0xFF	; 255
     b70:	80 93 68 00 	sts	0x0068, r24
				if (seconds == 60)			// 60 seconds equal to 1 minute
     b74:	80 91 68 00 	lds	r24, 0x0068
     b78:	8c 33       	cpi	r24, 0x3C	; 60
     b7a:	39 f4       	brne	.+14     	; 0xb8a <__vector_7+0x44>
				{
					minutes++;
     b7c:	80 91 69 00 	lds	r24, 0x0069
     b80:	8f 5f       	subi	r24, 0xFF	; 255
     b82:	80 93 69 00 	sts	0x0069, r24
					seconds = 0;
     b86:	10 92 68 00 	sts	0x0068, r1
				}
				if (minutes == 60) 			// 60 minutes equal to 1 hour
     b8a:	80 91 69 00 	lds	r24, 0x0069
     b8e:	8c 33       	cpi	r24, 0x3C	; 60
     b90:	39 f4       	brne	.+14     	; 0xba0 <__vector_7+0x5a>
				{
					hours++;
     b92:	80 91 6a 00 	lds	r24, 0x006A
     b96:	8f 5f       	subi	r24, 0xFF	; 255
     b98:	80 93 6a 00 	sts	0x006A, r24
					minutes = 0;
     b9c:	10 92 69 00 	sts	0x0069, r1
				}
				if (hours == 24) 			// if the stop watch reach to 24 hour, it will be reset
     ba0:	80 91 6a 00 	lds	r24, 0x006A
     ba4:	88 31       	cpi	r24, 0x18	; 24
     ba6:	09 f0       	breq	.+2      	; 0xbaa <__vector_7+0x64>
     ba8:	40 c0       	rjmp	.+128    	; 0xc2a <__vector_7+0xe4>
				{							//one day = 24 hours
					seconds = 0;
     baa:	10 92 68 00 	sts	0x0068, r1
					minutes = 0;
     bae:	10 92 69 00 	sts	0x0069, r1
					hours = 0;
     bb2:	10 92 6a 00 	sts	0x006A, r1
     bb6:	39 c0       	rjmp	.+114    	; 0xc2a <__vector_7+0xe4>
				}
		}
		else
		{
			// Count Down Mode
			if (seconds == 0 && hours == 0 && minutes == 0) {
     bb8:	80 91 68 00 	lds	r24, 0x0068
     bbc:	88 23       	and	r24, r24
     bbe:	79 f4       	brne	.+30     	; 0xbde <__vector_7+0x98>
     bc0:	80 91 6a 00 	lds	r24, 0x006A
     bc4:	88 23       	and	r24, r24
     bc6:	59 f4       	brne	.+22     	; 0xbde <__vector_7+0x98>
     bc8:	80 91 69 00 	lds	r24, 0x0069
     bcc:	88 23       	and	r24, r24
     bce:	39 f4       	brne	.+14     	; 0xbde <__vector_7+0x98>
				PORTD |= (1 << PD0);
     bd0:	a2 e3       	ldi	r26, 0x32	; 50
     bd2:	b0 e0       	ldi	r27, 0x00	; 0
     bd4:	e2 e3       	ldi	r30, 0x32	; 50
     bd6:	f0 e0       	ldi	r31, 0x00	; 0
     bd8:	80 81       	ld	r24, Z
     bda:	81 60       	ori	r24, 0x01	; 1
     bdc:	8c 93       	st	X, r24
			}

			if (seconds > 0) {
     bde:	80 91 68 00 	lds	r24, 0x0068
     be2:	88 23       	and	r24, r24
     be4:	31 f0       	breq	.+12     	; 0xbf2 <__vector_7+0xac>
				seconds--;
     be6:	80 91 68 00 	lds	r24, 0x0068
     bea:	81 50       	subi	r24, 0x01	; 1
     bec:	80 93 68 00 	sts	0x0068, r24
     bf0:	1c c0       	rjmp	.+56     	; 0xc2a <__vector_7+0xe4>
			} else if (minutes > 0) {
     bf2:	80 91 69 00 	lds	r24, 0x0069
     bf6:	88 23       	and	r24, r24
     bf8:	49 f0       	breq	.+18     	; 0xc0c <__vector_7+0xc6>
				seconds = 59;
     bfa:	8b e3       	ldi	r24, 0x3B	; 59
     bfc:	80 93 68 00 	sts	0x0068, r24
				minutes--;
     c00:	80 91 69 00 	lds	r24, 0x0069
     c04:	81 50       	subi	r24, 0x01	; 1
     c06:	80 93 69 00 	sts	0x0069, r24
     c0a:	0f c0       	rjmp	.+30     	; 0xc2a <__vector_7+0xe4>
			} else if (hours > 0) {
     c0c:	80 91 6a 00 	lds	r24, 0x006A
     c10:	88 23       	and	r24, r24
     c12:	59 f0       	breq	.+22     	; 0xc2a <__vector_7+0xe4>
				seconds = 59;
     c14:	8b e3       	ldi	r24, 0x3B	; 59
     c16:	80 93 68 00 	sts	0x0068, r24
				minutes = 59;
     c1a:	8b e3       	ldi	r24, 0x3B	; 59
     c1c:	80 93 69 00 	sts	0x0069, r24
				hours--;
     c20:	80 91 6a 00 	lds	r24, 0x006A
     c24:	81 50       	subi	r24, 0x01	; 1
     c26:	80 93 6a 00 	sts	0x006A, r24
			}
		}

}
     c2a:	cf 91       	pop	r28
     c2c:	df 91       	pop	r29
     c2e:	ff 91       	pop	r31
     c30:	ef 91       	pop	r30
     c32:	bf 91       	pop	r27
     c34:	af 91       	pop	r26
     c36:	8f 91       	pop	r24
     c38:	0f 90       	pop	r0
     c3a:	0f be       	out	0x3f, r0	; 63
     c3c:	0f 90       	pop	r0
     c3e:	1f 90       	pop	r1
     c40:	18 95       	reti

00000c42 <__vector_1>:


ISR(INT0_vect) {
     c42:	1f 92       	push	r1
     c44:	0f 92       	push	r0
     c46:	0f b6       	in	r0, 0x3f	; 63
     c48:	0f 92       	push	r0
     c4a:	11 24       	eor	r1, r1
     c4c:	ef 93       	push	r30
     c4e:	ff 93       	push	r31
     c50:	df 93       	push	r29
     c52:	cf 93       	push	r28
     c54:	cd b7       	in	r28, 0x3d	; 61
     c56:	de b7       	in	r29, 0x3e	; 62
	//when INT0 triggered, stop watch time should be reset by reset all variables
	TCNT1 = 0;
     c58:	ec e4       	ldi	r30, 0x4C	; 76
     c5a:	f0 e0       	ldi	r31, 0x00	; 0
     c5c:	11 82       	std	Z+1, r1	; 0x01
     c5e:	10 82       	st	Z, r1
	seconds = 0;
     c60:	10 92 68 00 	sts	0x0068, r1
	minutes = 0;
     c64:	10 92 69 00 	sts	0x0069, r1
	hours = 0;
     c68:	10 92 6a 00 	sts	0x006A, r1
}
     c6c:	cf 91       	pop	r28
     c6e:	df 91       	pop	r29
     c70:	ff 91       	pop	r31
     c72:	ef 91       	pop	r30
     c74:	0f 90       	pop	r0
     c76:	0f be       	out	0x3f, r0	; 63
     c78:	0f 90       	pop	r0
     c7a:	1f 90       	pop	r1
     c7c:	18 95       	reti

00000c7e <__vector_2>:

ISR(INT1_vect) {
     c7e:	1f 92       	push	r1
     c80:	0f 92       	push	r0
     c82:	0f b6       	in	r0, 0x3f	; 63
     c84:	0f 92       	push	r0
     c86:	11 24       	eor	r1, r1
     c88:	8f 93       	push	r24
     c8a:	af 93       	push	r26
     c8c:	bf 93       	push	r27
     c8e:	ef 93       	push	r30
     c90:	ff 93       	push	r31
     c92:	df 93       	push	r29
     c94:	cf 93       	push	r28
     c96:	cd b7       	in	r28, 0x3d	; 61
     c98:	de b7       	in	r29, 0x3e	; 62
	//when INT1 triggered, stop watch time should be paused by disable timer1 by disable clock
	TCCR1B &= ~(1 << CS10) &  ~(1 << CS11) &  ~(1 << CS12);
     c9a:	ae e4       	ldi	r26, 0x4E	; 78
     c9c:	b0 e0       	ldi	r27, 0x00	; 0
     c9e:	ee e4       	ldi	r30, 0x4E	; 78
     ca0:	f0 e0       	ldi	r31, 0x00	; 0
     ca2:	80 81       	ld	r24, Z
     ca4:	88 7f       	andi	r24, 0xF8	; 248
     ca6:	8c 93       	st	X, r24
}
     ca8:	cf 91       	pop	r28
     caa:	df 91       	pop	r29
     cac:	ff 91       	pop	r31
     cae:	ef 91       	pop	r30
     cb0:	bf 91       	pop	r27
     cb2:	af 91       	pop	r26
     cb4:	8f 91       	pop	r24
     cb6:	0f 90       	pop	r0
     cb8:	0f be       	out	0x3f, r0	; 63
     cba:	0f 90       	pop	r0
     cbc:	1f 90       	pop	r1
     cbe:	18 95       	reti

00000cc0 <__vector_3>:

ISR(INT2_vect) {
     cc0:	1f 92       	push	r1
     cc2:	0f 92       	push	r0
     cc4:	0f b6       	in	r0, 0x3f	; 63
     cc6:	0f 92       	push	r0
     cc8:	11 24       	eor	r1, r1
     cca:	8f 93       	push	r24
     ccc:	af 93       	push	r26
     cce:	bf 93       	push	r27
     cd0:	ef 93       	push	r30
     cd2:	ff 93       	push	r31
     cd4:	df 93       	push	r29
     cd6:	cf 93       	push	r28
     cd8:	cd b7       	in	r28, 0x3d	; 61
     cda:	de b7       	in	r29, 0x3e	; 62
	//when INT2 triggered, stop watch time should be resumed by enable clock to enable timer1
	TCCR1B |= (1 << CS10) | (1 << CS12);
     cdc:	ae e4       	ldi	r26, 0x4E	; 78
     cde:	b0 e0       	ldi	r27, 0x00	; 0
     ce0:	ee e4       	ldi	r30, 0x4E	; 78
     ce2:	f0 e0       	ldi	r31, 0x00	; 0
     ce4:	80 81       	ld	r24, Z
     ce6:	85 60       	ori	r24, 0x05	; 5
     ce8:	8c 93       	st	X, r24
}
     cea:	cf 91       	pop	r28
     cec:	df 91       	pop	r29
     cee:	ff 91       	pop	r31
     cf0:	ef 91       	pop	r30
     cf2:	bf 91       	pop	r27
     cf4:	af 91       	pop	r26
     cf6:	8f 91       	pop	r24
     cf8:	0f 90       	pop	r0
     cfa:	0f be       	out	0x3f, r0	; 63
     cfc:	0f 90       	pop	r0
     cfe:	1f 90       	pop	r1
     d00:	18 95       	reti

00000d02 <Seven_Segment_Multiplexed_Display_Time>:
/************************************************************************************
 * Function Name   : Seven_Segment_Multiplexed_Display_Time
 * Function Inputs : void
 * Description     : Function to display time on multiplexed six 7-Segment
 ************************************************************************************/
void  Seven_Segment_Multiplexed_Display_Time(void) {
     d02:	0f 93       	push	r16
     d04:	1f 93       	push	r17
     d06:	df 93       	push	r29
     d08:	cf 93       	push	r28
     d0a:	cd b7       	in	r28, 0x3d	; 61
     d0c:	de b7       	in	r29, 0x3e	; 62
     d0e:	c4 55       	subi	r28, 0x54	; 84
     d10:	d0 40       	sbci	r29, 0x00	; 0
     d12:	0f b6       	in	r0, 0x3f	; 63
     d14:	f8 94       	cli
     d16:	de bf       	out	0x3e, r29	; 62
     d18:	0f be       	out	0x3f, r0	; 63
     d1a:	cd bf       	out	0x3d, r28	; 61

	/*   HOURS	    MIN        SEC    */
		/* PA5	PA4   PA3  PA2	 PA1  PA0 */
	/* 0 0  0	 0	   0	0 	  0	   1  */
		PORTA = (PORTA & 0xC0) | 0x01;						/* enable first digit in seconds */
     d1c:	ab e3       	ldi	r26, 0x3B	; 59
     d1e:	b0 e0       	ldi	r27, 0x00	; 0
     d20:	eb e3       	ldi	r30, 0x3B	; 59
     d22:	f0 e0       	ldi	r31, 0x00	; 0
     d24:	80 81       	ld	r24, Z
     d26:	80 7c       	andi	r24, 0xC0	; 192
     d28:	81 60       	ori	r24, 0x01	; 1
     d2a:	8c 93       	st	X, r24
		PORTC = (PORTC & 0xF0) | ((seconds % 10) & 0x0F);	/* put the value of first digit in seconds*/
     d2c:	a5 e3       	ldi	r26, 0x35	; 53
     d2e:	b0 e0       	ldi	r27, 0x00	; 0
     d30:	e5 e3       	ldi	r30, 0x35	; 53
     d32:	f0 e0       	ldi	r31, 0x00	; 0
     d34:	80 81       	ld	r24, Z
     d36:	28 2f       	mov	r18, r24
     d38:	20 7f       	andi	r18, 0xF0	; 240
     d3a:	80 91 68 00 	lds	r24, 0x0068
     d3e:	9a e0       	ldi	r25, 0x0A	; 10
     d40:	69 2f       	mov	r22, r25
     d42:	0e 94 cd 0c 	call	0x199a	; 0x199a <__udivmodqi4>
     d46:	89 2f       	mov	r24, r25
     d48:	8f 70       	andi	r24, 0x0F	; 15
     d4a:	82 2b       	or	r24, r18
     d4c:	8c 93       	st	X, r24
     d4e:	fe 01       	movw	r30, r28
     d50:	ef 5a       	subi	r30, 0xAF	; 175
     d52:	ff 4f       	sbci	r31, 0xFF	; 255
     d54:	80 e0       	ldi	r24, 0x00	; 0
     d56:	90 e0       	ldi	r25, 0x00	; 0
     d58:	a0 e0       	ldi	r26, 0x00	; 0
     d5a:	b0 e4       	ldi	r27, 0x40	; 64
     d5c:	80 83       	st	Z, r24
     d5e:	91 83       	std	Z+1, r25	; 0x01
     d60:	a2 83       	std	Z+2, r26	; 0x02
     d62:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     d64:	8e 01       	movw	r16, r28
     d66:	03 5b       	subi	r16, 0xB3	; 179
     d68:	1f 4f       	sbci	r17, 0xFF	; 255
     d6a:	fe 01       	movw	r30, r28
     d6c:	ef 5a       	subi	r30, 0xAF	; 175
     d6e:	ff 4f       	sbci	r31, 0xFF	; 255
     d70:	60 81       	ld	r22, Z
     d72:	71 81       	ldd	r23, Z+1	; 0x01
     d74:	82 81       	ldd	r24, Z+2	; 0x02
     d76:	93 81       	ldd	r25, Z+3	; 0x03
     d78:	20 e0       	ldi	r18, 0x00	; 0
     d7a:	30 e0       	ldi	r19, 0x00	; 0
     d7c:	4a e7       	ldi	r20, 0x7A	; 122
     d7e:	55 e4       	ldi	r21, 0x45	; 69
     d80:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d84:	dc 01       	movw	r26, r24
     d86:	cb 01       	movw	r24, r22
     d88:	f8 01       	movw	r30, r16
     d8a:	80 83       	st	Z, r24
     d8c:	91 83       	std	Z+1, r25	; 0x01
     d8e:	a2 83       	std	Z+2, r26	; 0x02
     d90:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     d92:	fe 01       	movw	r30, r28
     d94:	e3 5b       	subi	r30, 0xB3	; 179
     d96:	ff 4f       	sbci	r31, 0xFF	; 255
     d98:	60 81       	ld	r22, Z
     d9a:	71 81       	ldd	r23, Z+1	; 0x01
     d9c:	82 81       	ldd	r24, Z+2	; 0x02
     d9e:	93 81       	ldd	r25, Z+3	; 0x03
     da0:	20 e0       	ldi	r18, 0x00	; 0
     da2:	30 e0       	ldi	r19, 0x00	; 0
     da4:	40 e8       	ldi	r20, 0x80	; 128
     da6:	5f e3       	ldi	r21, 0x3F	; 63
     da8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     dac:	88 23       	and	r24, r24
     dae:	44 f4       	brge	.+16     	; 0xdc0 <Seven_Segment_Multiplexed_Display_Time+0xbe>
		__ticks = 1;
     db0:	fe 01       	movw	r30, r28
     db2:	e5 5b       	subi	r30, 0xB5	; 181
     db4:	ff 4f       	sbci	r31, 0xFF	; 255
     db6:	81 e0       	ldi	r24, 0x01	; 1
     db8:	90 e0       	ldi	r25, 0x00	; 0
     dba:	91 83       	std	Z+1, r25	; 0x01
     dbc:	80 83       	st	Z, r24
     dbe:	64 c0       	rjmp	.+200    	; 0xe88 <Seven_Segment_Multiplexed_Display_Time+0x186>
	else if (__tmp > 65535)
     dc0:	fe 01       	movw	r30, r28
     dc2:	e3 5b       	subi	r30, 0xB3	; 179
     dc4:	ff 4f       	sbci	r31, 0xFF	; 255
     dc6:	60 81       	ld	r22, Z
     dc8:	71 81       	ldd	r23, Z+1	; 0x01
     dca:	82 81       	ldd	r24, Z+2	; 0x02
     dcc:	93 81       	ldd	r25, Z+3	; 0x03
     dce:	20 e0       	ldi	r18, 0x00	; 0
     dd0:	3f ef       	ldi	r19, 0xFF	; 255
     dd2:	4f e7       	ldi	r20, 0x7F	; 127
     dd4:	57 e4       	ldi	r21, 0x47	; 71
     dd6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     dda:	18 16       	cp	r1, r24
     ddc:	0c f0       	brlt	.+2      	; 0xde0 <Seven_Segment_Multiplexed_Display_Time+0xde>
     dde:	43 c0       	rjmp	.+134    	; 0xe66 <Seven_Segment_Multiplexed_Display_Time+0x164>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     de0:	fe 01       	movw	r30, r28
     de2:	ef 5a       	subi	r30, 0xAF	; 175
     de4:	ff 4f       	sbci	r31, 0xFF	; 255
     de6:	60 81       	ld	r22, Z
     de8:	71 81       	ldd	r23, Z+1	; 0x01
     dea:	82 81       	ldd	r24, Z+2	; 0x02
     dec:	93 81       	ldd	r25, Z+3	; 0x03
     dee:	20 e0       	ldi	r18, 0x00	; 0
     df0:	30 e0       	ldi	r19, 0x00	; 0
     df2:	40 e2       	ldi	r20, 0x20	; 32
     df4:	51 e4       	ldi	r21, 0x41	; 65
     df6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     dfa:	dc 01       	movw	r26, r24
     dfc:	cb 01       	movw	r24, r22
     dfe:	8e 01       	movw	r16, r28
     e00:	05 5b       	subi	r16, 0xB5	; 181
     e02:	1f 4f       	sbci	r17, 0xFF	; 255
     e04:	bc 01       	movw	r22, r24
     e06:	cd 01       	movw	r24, r26
     e08:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e0c:	dc 01       	movw	r26, r24
     e0e:	cb 01       	movw	r24, r22
     e10:	f8 01       	movw	r30, r16
     e12:	91 83       	std	Z+1, r25	; 0x01
     e14:	80 83       	st	Z, r24
     e16:	1f c0       	rjmp	.+62     	; 0xe56 <Seven_Segment_Multiplexed_Display_Time+0x154>
     e18:	fe 01       	movw	r30, r28
     e1a:	e7 5b       	subi	r30, 0xB7	; 183
     e1c:	ff 4f       	sbci	r31, 0xFF	; 255
     e1e:	80 e9       	ldi	r24, 0x90	; 144
     e20:	91 e0       	ldi	r25, 0x01	; 1
     e22:	91 83       	std	Z+1, r25	; 0x01
     e24:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     e26:	fe 01       	movw	r30, r28
     e28:	e7 5b       	subi	r30, 0xB7	; 183
     e2a:	ff 4f       	sbci	r31, 0xFF	; 255
     e2c:	80 81       	ld	r24, Z
     e2e:	91 81       	ldd	r25, Z+1	; 0x01
     e30:	01 97       	sbiw	r24, 0x01	; 1
     e32:	f1 f7       	brne	.-4      	; 0xe30 <Seven_Segment_Multiplexed_Display_Time+0x12e>
     e34:	fe 01       	movw	r30, r28
     e36:	e7 5b       	subi	r30, 0xB7	; 183
     e38:	ff 4f       	sbci	r31, 0xFF	; 255
     e3a:	91 83       	std	Z+1, r25	; 0x01
     e3c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e3e:	de 01       	movw	r26, r28
     e40:	a5 5b       	subi	r26, 0xB5	; 181
     e42:	bf 4f       	sbci	r27, 0xFF	; 255
     e44:	fe 01       	movw	r30, r28
     e46:	e5 5b       	subi	r30, 0xB5	; 181
     e48:	ff 4f       	sbci	r31, 0xFF	; 255
     e4a:	80 81       	ld	r24, Z
     e4c:	91 81       	ldd	r25, Z+1	; 0x01
     e4e:	01 97       	sbiw	r24, 0x01	; 1
     e50:	11 96       	adiw	r26, 0x01	; 1
     e52:	9c 93       	st	X, r25
     e54:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e56:	fe 01       	movw	r30, r28
     e58:	e5 5b       	subi	r30, 0xB5	; 181
     e5a:	ff 4f       	sbci	r31, 0xFF	; 255
     e5c:	80 81       	ld	r24, Z
     e5e:	91 81       	ldd	r25, Z+1	; 0x01
     e60:	00 97       	sbiw	r24, 0x00	; 0
     e62:	d1 f6       	brne	.-76     	; 0xe18 <Seven_Segment_Multiplexed_Display_Time+0x116>
     e64:	27 c0       	rjmp	.+78     	; 0xeb4 <Seven_Segment_Multiplexed_Display_Time+0x1b2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e66:	8e 01       	movw	r16, r28
     e68:	05 5b       	subi	r16, 0xB5	; 181
     e6a:	1f 4f       	sbci	r17, 0xFF	; 255
     e6c:	fe 01       	movw	r30, r28
     e6e:	e3 5b       	subi	r30, 0xB3	; 179
     e70:	ff 4f       	sbci	r31, 0xFF	; 255
     e72:	60 81       	ld	r22, Z
     e74:	71 81       	ldd	r23, Z+1	; 0x01
     e76:	82 81       	ldd	r24, Z+2	; 0x02
     e78:	93 81       	ldd	r25, Z+3	; 0x03
     e7a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e7e:	dc 01       	movw	r26, r24
     e80:	cb 01       	movw	r24, r22
     e82:	f8 01       	movw	r30, r16
     e84:	91 83       	std	Z+1, r25	; 0x01
     e86:	80 83       	st	Z, r24
     e88:	de 01       	movw	r26, r28
     e8a:	a9 5b       	subi	r26, 0xB9	; 185
     e8c:	bf 4f       	sbci	r27, 0xFF	; 255
     e8e:	fe 01       	movw	r30, r28
     e90:	e5 5b       	subi	r30, 0xB5	; 181
     e92:	ff 4f       	sbci	r31, 0xFF	; 255
     e94:	80 81       	ld	r24, Z
     e96:	91 81       	ldd	r25, Z+1	; 0x01
     e98:	8d 93       	st	X+, r24
     e9a:	9c 93       	st	X, r25
     e9c:	fe 01       	movw	r30, r28
     e9e:	e9 5b       	subi	r30, 0xB9	; 185
     ea0:	ff 4f       	sbci	r31, 0xFF	; 255
     ea2:	80 81       	ld	r24, Z
     ea4:	91 81       	ldd	r25, Z+1	; 0x01
     ea6:	01 97       	sbiw	r24, 0x01	; 1
     ea8:	f1 f7       	brne	.-4      	; 0xea6 <Seven_Segment_Multiplexed_Display_Time+0x1a4>
     eaa:	fe 01       	movw	r30, r28
     eac:	e9 5b       	subi	r30, 0xB9	; 185
     eae:	ff 4f       	sbci	r31, 0xFF	; 255
     eb0:	91 83       	std	Z+1, r25	; 0x01
     eb2:	80 83       	st	Z, r24
		_delay_ms(2);   									/*delay to show the number on 7-segment*/

		/*   HOURS	    MIN     	SEC   */
		/* PA5	PA4   PA3  PA2	 PA1  PA0 */
	/* 0 0  0	 0	   0	0 	  1	   0  */
		PORTA = (PORTA & 0xC0) | 0x02;						/* enable second digit in seconds */
     eb4:	ab e3       	ldi	r26, 0x3B	; 59
     eb6:	b0 e0       	ldi	r27, 0x00	; 0
     eb8:	eb e3       	ldi	r30, 0x3B	; 59
     eba:	f0 e0       	ldi	r31, 0x00	; 0
     ebc:	80 81       	ld	r24, Z
     ebe:	80 7c       	andi	r24, 0xC0	; 192
     ec0:	82 60       	ori	r24, 0x02	; 2
     ec2:	8c 93       	st	X, r24
		PORTC = (PORTC & 0xF0) | ((seconds / 10) & 0x0F);	/* put the value of second digit in seconds*/
     ec4:	a5 e3       	ldi	r26, 0x35	; 53
     ec6:	b0 e0       	ldi	r27, 0x00	; 0
     ec8:	e5 e3       	ldi	r30, 0x35	; 53
     eca:	f0 e0       	ldi	r31, 0x00	; 0
     ecc:	80 81       	ld	r24, Z
     ece:	28 2f       	mov	r18, r24
     ed0:	20 7f       	andi	r18, 0xF0	; 240
     ed2:	80 91 68 00 	lds	r24, 0x0068
     ed6:	9a e0       	ldi	r25, 0x0A	; 10
     ed8:	69 2f       	mov	r22, r25
     eda:	0e 94 cd 0c 	call	0x199a	; 0x199a <__udivmodqi4>
     ede:	8f 70       	andi	r24, 0x0F	; 15
     ee0:	82 2b       	or	r24, r18
     ee2:	8c 93       	st	X, r24
     ee4:	fe 01       	movw	r30, r28
     ee6:	ed 5b       	subi	r30, 0xBD	; 189
     ee8:	ff 4f       	sbci	r31, 0xFF	; 255
     eea:	80 e0       	ldi	r24, 0x00	; 0
     eec:	90 e0       	ldi	r25, 0x00	; 0
     eee:	a0 e0       	ldi	r26, 0x00	; 0
     ef0:	b0 e4       	ldi	r27, 0x40	; 64
     ef2:	80 83       	st	Z, r24
     ef4:	91 83       	std	Z+1, r25	; 0x01
     ef6:	a2 83       	std	Z+2, r26	; 0x02
     ef8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     efa:	8e 01       	movw	r16, r28
     efc:	01 5c       	subi	r16, 0xC1	; 193
     efe:	1f 4f       	sbci	r17, 0xFF	; 255
     f00:	fe 01       	movw	r30, r28
     f02:	ed 5b       	subi	r30, 0xBD	; 189
     f04:	ff 4f       	sbci	r31, 0xFF	; 255
     f06:	60 81       	ld	r22, Z
     f08:	71 81       	ldd	r23, Z+1	; 0x01
     f0a:	82 81       	ldd	r24, Z+2	; 0x02
     f0c:	93 81       	ldd	r25, Z+3	; 0x03
     f0e:	20 e0       	ldi	r18, 0x00	; 0
     f10:	30 e0       	ldi	r19, 0x00	; 0
     f12:	4a e7       	ldi	r20, 0x7A	; 122
     f14:	55 e4       	ldi	r21, 0x45	; 69
     f16:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f1a:	dc 01       	movw	r26, r24
     f1c:	cb 01       	movw	r24, r22
     f1e:	f8 01       	movw	r30, r16
     f20:	80 83       	st	Z, r24
     f22:	91 83       	std	Z+1, r25	; 0x01
     f24:	a2 83       	std	Z+2, r26	; 0x02
     f26:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     f28:	fe 01       	movw	r30, r28
     f2a:	ff 96       	adiw	r30, 0x3f	; 63
     f2c:	60 81       	ld	r22, Z
     f2e:	71 81       	ldd	r23, Z+1	; 0x01
     f30:	82 81       	ldd	r24, Z+2	; 0x02
     f32:	93 81       	ldd	r25, Z+3	; 0x03
     f34:	20 e0       	ldi	r18, 0x00	; 0
     f36:	30 e0       	ldi	r19, 0x00	; 0
     f38:	40 e8       	ldi	r20, 0x80	; 128
     f3a:	5f e3       	ldi	r21, 0x3F	; 63
     f3c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     f40:	88 23       	and	r24, r24
     f42:	2c f4       	brge	.+10     	; 0xf4e <Seven_Segment_Multiplexed_Display_Time+0x24c>
		__ticks = 1;
     f44:	81 e0       	ldi	r24, 0x01	; 1
     f46:	90 e0       	ldi	r25, 0x00	; 0
     f48:	9e af       	std	Y+62, r25	; 0x3e
     f4a:	8d af       	std	Y+61, r24	; 0x3d
     f4c:	46 c0       	rjmp	.+140    	; 0xfda <Seven_Segment_Multiplexed_Display_Time+0x2d8>
	else if (__tmp > 65535)
     f4e:	fe 01       	movw	r30, r28
     f50:	ff 96       	adiw	r30, 0x3f	; 63
     f52:	60 81       	ld	r22, Z
     f54:	71 81       	ldd	r23, Z+1	; 0x01
     f56:	82 81       	ldd	r24, Z+2	; 0x02
     f58:	93 81       	ldd	r25, Z+3	; 0x03
     f5a:	20 e0       	ldi	r18, 0x00	; 0
     f5c:	3f ef       	ldi	r19, 0xFF	; 255
     f5e:	4f e7       	ldi	r20, 0x7F	; 127
     f60:	57 e4       	ldi	r21, 0x47	; 71
     f62:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     f66:	18 16       	cp	r1, r24
     f68:	64 f5       	brge	.+88     	; 0xfc2 <Seven_Segment_Multiplexed_Display_Time+0x2c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f6a:	fe 01       	movw	r30, r28
     f6c:	ed 5b       	subi	r30, 0xBD	; 189
     f6e:	ff 4f       	sbci	r31, 0xFF	; 255
     f70:	60 81       	ld	r22, Z
     f72:	71 81       	ldd	r23, Z+1	; 0x01
     f74:	82 81       	ldd	r24, Z+2	; 0x02
     f76:	93 81       	ldd	r25, Z+3	; 0x03
     f78:	20 e0       	ldi	r18, 0x00	; 0
     f7a:	30 e0       	ldi	r19, 0x00	; 0
     f7c:	40 e2       	ldi	r20, 0x20	; 32
     f7e:	51 e4       	ldi	r21, 0x41	; 65
     f80:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f84:	dc 01       	movw	r26, r24
     f86:	cb 01       	movw	r24, r22
     f88:	bc 01       	movw	r22, r24
     f8a:	cd 01       	movw	r24, r26
     f8c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f90:	dc 01       	movw	r26, r24
     f92:	cb 01       	movw	r24, r22
     f94:	9e af       	std	Y+62, r25	; 0x3e
     f96:	8d af       	std	Y+61, r24	; 0x3d
     f98:	0f c0       	rjmp	.+30     	; 0xfb8 <Seven_Segment_Multiplexed_Display_Time+0x2b6>
     f9a:	80 e9       	ldi	r24, 0x90	; 144
     f9c:	91 e0       	ldi	r25, 0x01	; 1
     f9e:	9c af       	std	Y+60, r25	; 0x3c
     fa0:	8b af       	std	Y+59, r24	; 0x3b
     fa2:	8b ad       	ldd	r24, Y+59	; 0x3b
     fa4:	9c ad       	ldd	r25, Y+60	; 0x3c
     fa6:	01 97       	sbiw	r24, 0x01	; 1
     fa8:	f1 f7       	brne	.-4      	; 0xfa6 <Seven_Segment_Multiplexed_Display_Time+0x2a4>
     faa:	9c af       	std	Y+60, r25	; 0x3c
     fac:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     fae:	8d ad       	ldd	r24, Y+61	; 0x3d
     fb0:	9e ad       	ldd	r25, Y+62	; 0x3e
     fb2:	01 97       	sbiw	r24, 0x01	; 1
     fb4:	9e af       	std	Y+62, r25	; 0x3e
     fb6:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     fb8:	8d ad       	ldd	r24, Y+61	; 0x3d
     fba:	9e ad       	ldd	r25, Y+62	; 0x3e
     fbc:	00 97       	sbiw	r24, 0x00	; 0
     fbe:	69 f7       	brne	.-38     	; 0xf9a <Seven_Segment_Multiplexed_Display_Time+0x298>
     fc0:	16 c0       	rjmp	.+44     	; 0xfee <Seven_Segment_Multiplexed_Display_Time+0x2ec>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     fc2:	fe 01       	movw	r30, r28
     fc4:	ff 96       	adiw	r30, 0x3f	; 63
     fc6:	60 81       	ld	r22, Z
     fc8:	71 81       	ldd	r23, Z+1	; 0x01
     fca:	82 81       	ldd	r24, Z+2	; 0x02
     fcc:	93 81       	ldd	r25, Z+3	; 0x03
     fce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     fd2:	dc 01       	movw	r26, r24
     fd4:	cb 01       	movw	r24, r22
     fd6:	9e af       	std	Y+62, r25	; 0x3e
     fd8:	8d af       	std	Y+61, r24	; 0x3d
     fda:	8d ad       	ldd	r24, Y+61	; 0x3d
     fdc:	9e ad       	ldd	r25, Y+62	; 0x3e
     fde:	9a af       	std	Y+58, r25	; 0x3a
     fe0:	89 af       	std	Y+57, r24	; 0x39
     fe2:	89 ad       	ldd	r24, Y+57	; 0x39
     fe4:	9a ad       	ldd	r25, Y+58	; 0x3a
     fe6:	01 97       	sbiw	r24, 0x01	; 1
     fe8:	f1 f7       	brne	.-4      	; 0xfe6 <Seven_Segment_Multiplexed_Display_Time+0x2e4>
     fea:	9a af       	std	Y+58, r25	; 0x3a
     fec:	89 af       	std	Y+57, r24	; 0x39
		_delay_ms(2);										/*delay to show the number on 7-segment*/

		/*   HOURS	    MIN     	SEC   */
		/* PA5	PA4   PA3  PA2	 PA1  PA0 */
	/* 0 0  0	 0	   0	1 	  0	   0  */
		PORTA = (PORTA & 0xC0) | 0x04;					    /* enable first digit in minutes */
     fee:	ab e3       	ldi	r26, 0x3B	; 59
     ff0:	b0 e0       	ldi	r27, 0x00	; 0
     ff2:	eb e3       	ldi	r30, 0x3B	; 59
     ff4:	f0 e0       	ldi	r31, 0x00	; 0
     ff6:	80 81       	ld	r24, Z
     ff8:	80 7c       	andi	r24, 0xC0	; 192
     ffa:	84 60       	ori	r24, 0x04	; 4
     ffc:	8c 93       	st	X, r24
		PORTC = (PORTC & 0xF0) | ((minutes % 10) & 0x0F);   /* put the value of first digit in minutes*/
     ffe:	a5 e3       	ldi	r26, 0x35	; 53
    1000:	b0 e0       	ldi	r27, 0x00	; 0
    1002:	e5 e3       	ldi	r30, 0x35	; 53
    1004:	f0 e0       	ldi	r31, 0x00	; 0
    1006:	80 81       	ld	r24, Z
    1008:	28 2f       	mov	r18, r24
    100a:	20 7f       	andi	r18, 0xF0	; 240
    100c:	80 91 69 00 	lds	r24, 0x0069
    1010:	9a e0       	ldi	r25, 0x0A	; 10
    1012:	69 2f       	mov	r22, r25
    1014:	0e 94 cd 0c 	call	0x199a	; 0x199a <__udivmodqi4>
    1018:	89 2f       	mov	r24, r25
    101a:	8f 70       	andi	r24, 0x0F	; 15
    101c:	82 2b       	or	r24, r18
    101e:	8c 93       	st	X, r24
    1020:	80 e0       	ldi	r24, 0x00	; 0
    1022:	90 e0       	ldi	r25, 0x00	; 0
    1024:	a0 e0       	ldi	r26, 0x00	; 0
    1026:	b0 e4       	ldi	r27, 0x40	; 64
    1028:	8d ab       	std	Y+53, r24	; 0x35
    102a:	9e ab       	std	Y+54, r25	; 0x36
    102c:	af ab       	std	Y+55, r26	; 0x37
    102e:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1030:	6d a9       	ldd	r22, Y+53	; 0x35
    1032:	7e a9       	ldd	r23, Y+54	; 0x36
    1034:	8f a9       	ldd	r24, Y+55	; 0x37
    1036:	98 ad       	ldd	r25, Y+56	; 0x38
    1038:	20 e0       	ldi	r18, 0x00	; 0
    103a:	30 e0       	ldi	r19, 0x00	; 0
    103c:	4a e7       	ldi	r20, 0x7A	; 122
    103e:	55 e4       	ldi	r21, 0x45	; 69
    1040:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1044:	dc 01       	movw	r26, r24
    1046:	cb 01       	movw	r24, r22
    1048:	89 ab       	std	Y+49, r24	; 0x31
    104a:	9a ab       	std	Y+50, r25	; 0x32
    104c:	ab ab       	std	Y+51, r26	; 0x33
    104e:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1050:	69 a9       	ldd	r22, Y+49	; 0x31
    1052:	7a a9       	ldd	r23, Y+50	; 0x32
    1054:	8b a9       	ldd	r24, Y+51	; 0x33
    1056:	9c a9       	ldd	r25, Y+52	; 0x34
    1058:	20 e0       	ldi	r18, 0x00	; 0
    105a:	30 e0       	ldi	r19, 0x00	; 0
    105c:	40 e8       	ldi	r20, 0x80	; 128
    105e:	5f e3       	ldi	r21, 0x3F	; 63
    1060:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1064:	88 23       	and	r24, r24
    1066:	2c f4       	brge	.+10     	; 0x1072 <Seven_Segment_Multiplexed_Display_Time+0x370>
		__ticks = 1;
    1068:	81 e0       	ldi	r24, 0x01	; 1
    106a:	90 e0       	ldi	r25, 0x00	; 0
    106c:	98 ab       	std	Y+48, r25	; 0x30
    106e:	8f a7       	std	Y+47, r24	; 0x2f
    1070:	3f c0       	rjmp	.+126    	; 0x10f0 <Seven_Segment_Multiplexed_Display_Time+0x3ee>
	else if (__tmp > 65535)
    1072:	69 a9       	ldd	r22, Y+49	; 0x31
    1074:	7a a9       	ldd	r23, Y+50	; 0x32
    1076:	8b a9       	ldd	r24, Y+51	; 0x33
    1078:	9c a9       	ldd	r25, Y+52	; 0x34
    107a:	20 e0       	ldi	r18, 0x00	; 0
    107c:	3f ef       	ldi	r19, 0xFF	; 255
    107e:	4f e7       	ldi	r20, 0x7F	; 127
    1080:	57 e4       	ldi	r21, 0x47	; 71
    1082:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1086:	18 16       	cp	r1, r24
    1088:	4c f5       	brge	.+82     	; 0x10dc <Seven_Segment_Multiplexed_Display_Time+0x3da>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    108a:	6d a9       	ldd	r22, Y+53	; 0x35
    108c:	7e a9       	ldd	r23, Y+54	; 0x36
    108e:	8f a9       	ldd	r24, Y+55	; 0x37
    1090:	98 ad       	ldd	r25, Y+56	; 0x38
    1092:	20 e0       	ldi	r18, 0x00	; 0
    1094:	30 e0       	ldi	r19, 0x00	; 0
    1096:	40 e2       	ldi	r20, 0x20	; 32
    1098:	51 e4       	ldi	r21, 0x41	; 65
    109a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    109e:	dc 01       	movw	r26, r24
    10a0:	cb 01       	movw	r24, r22
    10a2:	bc 01       	movw	r22, r24
    10a4:	cd 01       	movw	r24, r26
    10a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    10aa:	dc 01       	movw	r26, r24
    10ac:	cb 01       	movw	r24, r22
    10ae:	98 ab       	std	Y+48, r25	; 0x30
    10b0:	8f a7       	std	Y+47, r24	; 0x2f
    10b2:	0f c0       	rjmp	.+30     	; 0x10d2 <Seven_Segment_Multiplexed_Display_Time+0x3d0>
    10b4:	80 e9       	ldi	r24, 0x90	; 144
    10b6:	91 e0       	ldi	r25, 0x01	; 1
    10b8:	9e a7       	std	Y+46, r25	; 0x2e
    10ba:	8d a7       	std	Y+45, r24	; 0x2d
    10bc:	8d a5       	ldd	r24, Y+45	; 0x2d
    10be:	9e a5       	ldd	r25, Y+46	; 0x2e
    10c0:	01 97       	sbiw	r24, 0x01	; 1
    10c2:	f1 f7       	brne	.-4      	; 0x10c0 <Seven_Segment_Multiplexed_Display_Time+0x3be>
    10c4:	9e a7       	std	Y+46, r25	; 0x2e
    10c6:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    10c8:	8f a5       	ldd	r24, Y+47	; 0x2f
    10ca:	98 a9       	ldd	r25, Y+48	; 0x30
    10cc:	01 97       	sbiw	r24, 0x01	; 1
    10ce:	98 ab       	std	Y+48, r25	; 0x30
    10d0:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    10d2:	8f a5       	ldd	r24, Y+47	; 0x2f
    10d4:	98 a9       	ldd	r25, Y+48	; 0x30
    10d6:	00 97       	sbiw	r24, 0x00	; 0
    10d8:	69 f7       	brne	.-38     	; 0x10b4 <Seven_Segment_Multiplexed_Display_Time+0x3b2>
    10da:	14 c0       	rjmp	.+40     	; 0x1104 <Seven_Segment_Multiplexed_Display_Time+0x402>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    10dc:	69 a9       	ldd	r22, Y+49	; 0x31
    10de:	7a a9       	ldd	r23, Y+50	; 0x32
    10e0:	8b a9       	ldd	r24, Y+51	; 0x33
    10e2:	9c a9       	ldd	r25, Y+52	; 0x34
    10e4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    10e8:	dc 01       	movw	r26, r24
    10ea:	cb 01       	movw	r24, r22
    10ec:	98 ab       	std	Y+48, r25	; 0x30
    10ee:	8f a7       	std	Y+47, r24	; 0x2f
    10f0:	8f a5       	ldd	r24, Y+47	; 0x2f
    10f2:	98 a9       	ldd	r25, Y+48	; 0x30
    10f4:	9c a7       	std	Y+44, r25	; 0x2c
    10f6:	8b a7       	std	Y+43, r24	; 0x2b
    10f8:	8b a5       	ldd	r24, Y+43	; 0x2b
    10fa:	9c a5       	ldd	r25, Y+44	; 0x2c
    10fc:	01 97       	sbiw	r24, 0x01	; 1
    10fe:	f1 f7       	brne	.-4      	; 0x10fc <Seven_Segment_Multiplexed_Display_Time+0x3fa>
    1100:	9c a7       	std	Y+44, r25	; 0x2c
    1102:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(2);										/*delay to show the number on 7-segment*/

		/*   HOURS	    MIN     	SEC   */
		/* PA5	PA4   PA3  PA2	 PA1  PA0 */
	/* 0 0  0	 0	   1	0	  0	   0  */
		PORTA = (PORTA & 0xC0) | 0x08;						/* enable second digit in minutes */
    1104:	ab e3       	ldi	r26, 0x3B	; 59
    1106:	b0 e0       	ldi	r27, 0x00	; 0
    1108:	eb e3       	ldi	r30, 0x3B	; 59
    110a:	f0 e0       	ldi	r31, 0x00	; 0
    110c:	80 81       	ld	r24, Z
    110e:	80 7c       	andi	r24, 0xC0	; 192
    1110:	88 60       	ori	r24, 0x08	; 8
    1112:	8c 93       	st	X, r24
		PORTC = (PORTC & 0xF0) | ((minutes / 10) & 0x0F);	/* put the value of second digit in minutes */
    1114:	a5 e3       	ldi	r26, 0x35	; 53
    1116:	b0 e0       	ldi	r27, 0x00	; 0
    1118:	e5 e3       	ldi	r30, 0x35	; 53
    111a:	f0 e0       	ldi	r31, 0x00	; 0
    111c:	80 81       	ld	r24, Z
    111e:	28 2f       	mov	r18, r24
    1120:	20 7f       	andi	r18, 0xF0	; 240
    1122:	80 91 69 00 	lds	r24, 0x0069
    1126:	9a e0       	ldi	r25, 0x0A	; 10
    1128:	69 2f       	mov	r22, r25
    112a:	0e 94 cd 0c 	call	0x199a	; 0x199a <__udivmodqi4>
    112e:	8f 70       	andi	r24, 0x0F	; 15
    1130:	82 2b       	or	r24, r18
    1132:	8c 93       	st	X, r24
    1134:	80 e0       	ldi	r24, 0x00	; 0
    1136:	90 e0       	ldi	r25, 0x00	; 0
    1138:	a0 e0       	ldi	r26, 0x00	; 0
    113a:	b0 e4       	ldi	r27, 0x40	; 64
    113c:	8f a3       	std	Y+39, r24	; 0x27
    113e:	98 a7       	std	Y+40, r25	; 0x28
    1140:	a9 a7       	std	Y+41, r26	; 0x29
    1142:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1144:	6f a1       	ldd	r22, Y+39	; 0x27
    1146:	78 a5       	ldd	r23, Y+40	; 0x28
    1148:	89 a5       	ldd	r24, Y+41	; 0x29
    114a:	9a a5       	ldd	r25, Y+42	; 0x2a
    114c:	20 e0       	ldi	r18, 0x00	; 0
    114e:	30 e0       	ldi	r19, 0x00	; 0
    1150:	4a e7       	ldi	r20, 0x7A	; 122
    1152:	55 e4       	ldi	r21, 0x45	; 69
    1154:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1158:	dc 01       	movw	r26, r24
    115a:	cb 01       	movw	r24, r22
    115c:	8b a3       	std	Y+35, r24	; 0x23
    115e:	9c a3       	std	Y+36, r25	; 0x24
    1160:	ad a3       	std	Y+37, r26	; 0x25
    1162:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1164:	6b a1       	ldd	r22, Y+35	; 0x23
    1166:	7c a1       	ldd	r23, Y+36	; 0x24
    1168:	8d a1       	ldd	r24, Y+37	; 0x25
    116a:	9e a1       	ldd	r25, Y+38	; 0x26
    116c:	20 e0       	ldi	r18, 0x00	; 0
    116e:	30 e0       	ldi	r19, 0x00	; 0
    1170:	40 e8       	ldi	r20, 0x80	; 128
    1172:	5f e3       	ldi	r21, 0x3F	; 63
    1174:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1178:	88 23       	and	r24, r24
    117a:	2c f4       	brge	.+10     	; 0x1186 <Seven_Segment_Multiplexed_Display_Time+0x484>
		__ticks = 1;
    117c:	81 e0       	ldi	r24, 0x01	; 1
    117e:	90 e0       	ldi	r25, 0x00	; 0
    1180:	9a a3       	std	Y+34, r25	; 0x22
    1182:	89 a3       	std	Y+33, r24	; 0x21
    1184:	3f c0       	rjmp	.+126    	; 0x1204 <Seven_Segment_Multiplexed_Display_Time+0x502>
	else if (__tmp > 65535)
    1186:	6b a1       	ldd	r22, Y+35	; 0x23
    1188:	7c a1       	ldd	r23, Y+36	; 0x24
    118a:	8d a1       	ldd	r24, Y+37	; 0x25
    118c:	9e a1       	ldd	r25, Y+38	; 0x26
    118e:	20 e0       	ldi	r18, 0x00	; 0
    1190:	3f ef       	ldi	r19, 0xFF	; 255
    1192:	4f e7       	ldi	r20, 0x7F	; 127
    1194:	57 e4       	ldi	r21, 0x47	; 71
    1196:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    119a:	18 16       	cp	r1, r24
    119c:	4c f5       	brge	.+82     	; 0x11f0 <Seven_Segment_Multiplexed_Display_Time+0x4ee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    119e:	6f a1       	ldd	r22, Y+39	; 0x27
    11a0:	78 a5       	ldd	r23, Y+40	; 0x28
    11a2:	89 a5       	ldd	r24, Y+41	; 0x29
    11a4:	9a a5       	ldd	r25, Y+42	; 0x2a
    11a6:	20 e0       	ldi	r18, 0x00	; 0
    11a8:	30 e0       	ldi	r19, 0x00	; 0
    11aa:	40 e2       	ldi	r20, 0x20	; 32
    11ac:	51 e4       	ldi	r21, 0x41	; 65
    11ae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11b2:	dc 01       	movw	r26, r24
    11b4:	cb 01       	movw	r24, r22
    11b6:	bc 01       	movw	r22, r24
    11b8:	cd 01       	movw	r24, r26
    11ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11be:	dc 01       	movw	r26, r24
    11c0:	cb 01       	movw	r24, r22
    11c2:	9a a3       	std	Y+34, r25	; 0x22
    11c4:	89 a3       	std	Y+33, r24	; 0x21
    11c6:	0f c0       	rjmp	.+30     	; 0x11e6 <Seven_Segment_Multiplexed_Display_Time+0x4e4>
    11c8:	80 e9       	ldi	r24, 0x90	; 144
    11ca:	91 e0       	ldi	r25, 0x01	; 1
    11cc:	98 a3       	std	Y+32, r25	; 0x20
    11ce:	8f 8f       	std	Y+31, r24	; 0x1f
    11d0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    11d2:	98 a1       	ldd	r25, Y+32	; 0x20
    11d4:	01 97       	sbiw	r24, 0x01	; 1
    11d6:	f1 f7       	brne	.-4      	; 0x11d4 <Seven_Segment_Multiplexed_Display_Time+0x4d2>
    11d8:	98 a3       	std	Y+32, r25	; 0x20
    11da:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    11dc:	89 a1       	ldd	r24, Y+33	; 0x21
    11de:	9a a1       	ldd	r25, Y+34	; 0x22
    11e0:	01 97       	sbiw	r24, 0x01	; 1
    11e2:	9a a3       	std	Y+34, r25	; 0x22
    11e4:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    11e6:	89 a1       	ldd	r24, Y+33	; 0x21
    11e8:	9a a1       	ldd	r25, Y+34	; 0x22
    11ea:	00 97       	sbiw	r24, 0x00	; 0
    11ec:	69 f7       	brne	.-38     	; 0x11c8 <Seven_Segment_Multiplexed_Display_Time+0x4c6>
    11ee:	14 c0       	rjmp	.+40     	; 0x1218 <Seven_Segment_Multiplexed_Display_Time+0x516>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    11f0:	6b a1       	ldd	r22, Y+35	; 0x23
    11f2:	7c a1       	ldd	r23, Y+36	; 0x24
    11f4:	8d a1       	ldd	r24, Y+37	; 0x25
    11f6:	9e a1       	ldd	r25, Y+38	; 0x26
    11f8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11fc:	dc 01       	movw	r26, r24
    11fe:	cb 01       	movw	r24, r22
    1200:	9a a3       	std	Y+34, r25	; 0x22
    1202:	89 a3       	std	Y+33, r24	; 0x21
    1204:	89 a1       	ldd	r24, Y+33	; 0x21
    1206:	9a a1       	ldd	r25, Y+34	; 0x22
    1208:	9e 8f       	std	Y+30, r25	; 0x1e
    120a:	8d 8f       	std	Y+29, r24	; 0x1d
    120c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    120e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1210:	01 97       	sbiw	r24, 0x01	; 1
    1212:	f1 f7       	brne	.-4      	; 0x1210 <Seven_Segment_Multiplexed_Display_Time+0x50e>
    1214:	9e 8f       	std	Y+30, r25	; 0x1e
    1216:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(2);										/*delay to show the number on 7-segment*/

		/*   HOURS	    MIN     	SEC   */
		/* PA5	PA4   PA3  PA2	 PA1  PA0 */
	/* 0 0  0	 1	   0	0	  0	   0  */
		PORTA = (PORTA & 0xC0) | 0x10;						/* enable first digit in hours */
    1218:	ab e3       	ldi	r26, 0x3B	; 59
    121a:	b0 e0       	ldi	r27, 0x00	; 0
    121c:	eb e3       	ldi	r30, 0x3B	; 59
    121e:	f0 e0       	ldi	r31, 0x00	; 0
    1220:	80 81       	ld	r24, Z
    1222:	80 7c       	andi	r24, 0xC0	; 192
    1224:	80 61       	ori	r24, 0x10	; 16
    1226:	8c 93       	st	X, r24
		PORTC = (PORTC & 0xF0) | ((hours % 10) & 0x0F);		/* put the value of first digit in hours */
    1228:	a5 e3       	ldi	r26, 0x35	; 53
    122a:	b0 e0       	ldi	r27, 0x00	; 0
    122c:	e5 e3       	ldi	r30, 0x35	; 53
    122e:	f0 e0       	ldi	r31, 0x00	; 0
    1230:	80 81       	ld	r24, Z
    1232:	28 2f       	mov	r18, r24
    1234:	20 7f       	andi	r18, 0xF0	; 240
    1236:	80 91 6a 00 	lds	r24, 0x006A
    123a:	9a e0       	ldi	r25, 0x0A	; 10
    123c:	69 2f       	mov	r22, r25
    123e:	0e 94 cd 0c 	call	0x199a	; 0x199a <__udivmodqi4>
    1242:	89 2f       	mov	r24, r25
    1244:	8f 70       	andi	r24, 0x0F	; 15
    1246:	82 2b       	or	r24, r18
    1248:	8c 93       	st	X, r24
    124a:	80 e0       	ldi	r24, 0x00	; 0
    124c:	90 e0       	ldi	r25, 0x00	; 0
    124e:	a0 e0       	ldi	r26, 0x00	; 0
    1250:	b0 e4       	ldi	r27, 0x40	; 64
    1252:	89 8f       	std	Y+25, r24	; 0x19
    1254:	9a 8f       	std	Y+26, r25	; 0x1a
    1256:	ab 8f       	std	Y+27, r26	; 0x1b
    1258:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    125a:	69 8d       	ldd	r22, Y+25	; 0x19
    125c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    125e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1260:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1262:	20 e0       	ldi	r18, 0x00	; 0
    1264:	30 e0       	ldi	r19, 0x00	; 0
    1266:	4a e7       	ldi	r20, 0x7A	; 122
    1268:	55 e4       	ldi	r21, 0x45	; 69
    126a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    126e:	dc 01       	movw	r26, r24
    1270:	cb 01       	movw	r24, r22
    1272:	8d 8b       	std	Y+21, r24	; 0x15
    1274:	9e 8b       	std	Y+22, r25	; 0x16
    1276:	af 8b       	std	Y+23, r26	; 0x17
    1278:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    127a:	6d 89       	ldd	r22, Y+21	; 0x15
    127c:	7e 89       	ldd	r23, Y+22	; 0x16
    127e:	8f 89       	ldd	r24, Y+23	; 0x17
    1280:	98 8d       	ldd	r25, Y+24	; 0x18
    1282:	20 e0       	ldi	r18, 0x00	; 0
    1284:	30 e0       	ldi	r19, 0x00	; 0
    1286:	40 e8       	ldi	r20, 0x80	; 128
    1288:	5f e3       	ldi	r21, 0x3F	; 63
    128a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    128e:	88 23       	and	r24, r24
    1290:	2c f4       	brge	.+10     	; 0x129c <Seven_Segment_Multiplexed_Display_Time+0x59a>
		__ticks = 1;
    1292:	81 e0       	ldi	r24, 0x01	; 1
    1294:	90 e0       	ldi	r25, 0x00	; 0
    1296:	9c 8b       	std	Y+20, r25	; 0x14
    1298:	8b 8b       	std	Y+19, r24	; 0x13
    129a:	3f c0       	rjmp	.+126    	; 0x131a <Seven_Segment_Multiplexed_Display_Time+0x618>
	else if (__tmp > 65535)
    129c:	6d 89       	ldd	r22, Y+21	; 0x15
    129e:	7e 89       	ldd	r23, Y+22	; 0x16
    12a0:	8f 89       	ldd	r24, Y+23	; 0x17
    12a2:	98 8d       	ldd	r25, Y+24	; 0x18
    12a4:	20 e0       	ldi	r18, 0x00	; 0
    12a6:	3f ef       	ldi	r19, 0xFF	; 255
    12a8:	4f e7       	ldi	r20, 0x7F	; 127
    12aa:	57 e4       	ldi	r21, 0x47	; 71
    12ac:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    12b0:	18 16       	cp	r1, r24
    12b2:	4c f5       	brge	.+82     	; 0x1306 <Seven_Segment_Multiplexed_Display_Time+0x604>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    12b4:	69 8d       	ldd	r22, Y+25	; 0x19
    12b6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    12b8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    12ba:	9c 8d       	ldd	r25, Y+28	; 0x1c
    12bc:	20 e0       	ldi	r18, 0x00	; 0
    12be:	30 e0       	ldi	r19, 0x00	; 0
    12c0:	40 e2       	ldi	r20, 0x20	; 32
    12c2:	51 e4       	ldi	r21, 0x41	; 65
    12c4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12c8:	dc 01       	movw	r26, r24
    12ca:	cb 01       	movw	r24, r22
    12cc:	bc 01       	movw	r22, r24
    12ce:	cd 01       	movw	r24, r26
    12d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12d4:	dc 01       	movw	r26, r24
    12d6:	cb 01       	movw	r24, r22
    12d8:	9c 8b       	std	Y+20, r25	; 0x14
    12da:	8b 8b       	std	Y+19, r24	; 0x13
    12dc:	0f c0       	rjmp	.+30     	; 0x12fc <Seven_Segment_Multiplexed_Display_Time+0x5fa>
    12de:	80 e9       	ldi	r24, 0x90	; 144
    12e0:	91 e0       	ldi	r25, 0x01	; 1
    12e2:	9a 8b       	std	Y+18, r25	; 0x12
    12e4:	89 8b       	std	Y+17, r24	; 0x11
    12e6:	89 89       	ldd	r24, Y+17	; 0x11
    12e8:	9a 89       	ldd	r25, Y+18	; 0x12
    12ea:	01 97       	sbiw	r24, 0x01	; 1
    12ec:	f1 f7       	brne	.-4      	; 0x12ea <Seven_Segment_Multiplexed_Display_Time+0x5e8>
    12ee:	9a 8b       	std	Y+18, r25	; 0x12
    12f0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    12f2:	8b 89       	ldd	r24, Y+19	; 0x13
    12f4:	9c 89       	ldd	r25, Y+20	; 0x14
    12f6:	01 97       	sbiw	r24, 0x01	; 1
    12f8:	9c 8b       	std	Y+20, r25	; 0x14
    12fa:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    12fc:	8b 89       	ldd	r24, Y+19	; 0x13
    12fe:	9c 89       	ldd	r25, Y+20	; 0x14
    1300:	00 97       	sbiw	r24, 0x00	; 0
    1302:	69 f7       	brne	.-38     	; 0x12de <Seven_Segment_Multiplexed_Display_Time+0x5dc>
    1304:	14 c0       	rjmp	.+40     	; 0x132e <Seven_Segment_Multiplexed_Display_Time+0x62c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1306:	6d 89       	ldd	r22, Y+21	; 0x15
    1308:	7e 89       	ldd	r23, Y+22	; 0x16
    130a:	8f 89       	ldd	r24, Y+23	; 0x17
    130c:	98 8d       	ldd	r25, Y+24	; 0x18
    130e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1312:	dc 01       	movw	r26, r24
    1314:	cb 01       	movw	r24, r22
    1316:	9c 8b       	std	Y+20, r25	; 0x14
    1318:	8b 8b       	std	Y+19, r24	; 0x13
    131a:	8b 89       	ldd	r24, Y+19	; 0x13
    131c:	9c 89       	ldd	r25, Y+20	; 0x14
    131e:	98 8b       	std	Y+16, r25	; 0x10
    1320:	8f 87       	std	Y+15, r24	; 0x0f
    1322:	8f 85       	ldd	r24, Y+15	; 0x0f
    1324:	98 89       	ldd	r25, Y+16	; 0x10
    1326:	01 97       	sbiw	r24, 0x01	; 1
    1328:	f1 f7       	brne	.-4      	; 0x1326 <Seven_Segment_Multiplexed_Display_Time+0x624>
    132a:	98 8b       	std	Y+16, r25	; 0x10
    132c:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(2);										/*delay to show the number on 7-segment*/

		/*   HOURS	    MIN     	SEC   */
		/* PA5	PA4   PA3  PA2	 PA1  PA0 */
	/* 0 0  1	 0	   0	0	  0	   0  */
		PORTA = (PORTA & 0xC0) | 0x20;						/* enable second digit in hours */
    132e:	ab e3       	ldi	r26, 0x3B	; 59
    1330:	b0 e0       	ldi	r27, 0x00	; 0
    1332:	eb e3       	ldi	r30, 0x3B	; 59
    1334:	f0 e0       	ldi	r31, 0x00	; 0
    1336:	80 81       	ld	r24, Z
    1338:	80 7c       	andi	r24, 0xC0	; 192
    133a:	80 62       	ori	r24, 0x20	; 32
    133c:	8c 93       	st	X, r24
		PORTC = (PORTC & 0xF0) | ((hours / 10) & 0x0F);     /* put the value of second digit in hours*/
    133e:	a5 e3       	ldi	r26, 0x35	; 53
    1340:	b0 e0       	ldi	r27, 0x00	; 0
    1342:	e5 e3       	ldi	r30, 0x35	; 53
    1344:	f0 e0       	ldi	r31, 0x00	; 0
    1346:	80 81       	ld	r24, Z
    1348:	28 2f       	mov	r18, r24
    134a:	20 7f       	andi	r18, 0xF0	; 240
    134c:	80 91 6a 00 	lds	r24, 0x006A
    1350:	9a e0       	ldi	r25, 0x0A	; 10
    1352:	69 2f       	mov	r22, r25
    1354:	0e 94 cd 0c 	call	0x199a	; 0x199a <__udivmodqi4>
    1358:	8f 70       	andi	r24, 0x0F	; 15
    135a:	82 2b       	or	r24, r18
    135c:	8c 93       	st	X, r24
    135e:	80 e0       	ldi	r24, 0x00	; 0
    1360:	90 e0       	ldi	r25, 0x00	; 0
    1362:	a0 e0       	ldi	r26, 0x00	; 0
    1364:	b0 e4       	ldi	r27, 0x40	; 64
    1366:	8b 87       	std	Y+11, r24	; 0x0b
    1368:	9c 87       	std	Y+12, r25	; 0x0c
    136a:	ad 87       	std	Y+13, r26	; 0x0d
    136c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    136e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1370:	7c 85       	ldd	r23, Y+12	; 0x0c
    1372:	8d 85       	ldd	r24, Y+13	; 0x0d
    1374:	9e 85       	ldd	r25, Y+14	; 0x0e
    1376:	20 e0       	ldi	r18, 0x00	; 0
    1378:	30 e0       	ldi	r19, 0x00	; 0
    137a:	4a e7       	ldi	r20, 0x7A	; 122
    137c:	55 e4       	ldi	r21, 0x45	; 69
    137e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1382:	dc 01       	movw	r26, r24
    1384:	cb 01       	movw	r24, r22
    1386:	8f 83       	std	Y+7, r24	; 0x07
    1388:	98 87       	std	Y+8, r25	; 0x08
    138a:	a9 87       	std	Y+9, r26	; 0x09
    138c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    138e:	6f 81       	ldd	r22, Y+7	; 0x07
    1390:	78 85       	ldd	r23, Y+8	; 0x08
    1392:	89 85       	ldd	r24, Y+9	; 0x09
    1394:	9a 85       	ldd	r25, Y+10	; 0x0a
    1396:	20 e0       	ldi	r18, 0x00	; 0
    1398:	30 e0       	ldi	r19, 0x00	; 0
    139a:	40 e8       	ldi	r20, 0x80	; 128
    139c:	5f e3       	ldi	r21, 0x3F	; 63
    139e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    13a2:	88 23       	and	r24, r24
    13a4:	2c f4       	brge	.+10     	; 0x13b0 <Seven_Segment_Multiplexed_Display_Time+0x6ae>
		__ticks = 1;
    13a6:	81 e0       	ldi	r24, 0x01	; 1
    13a8:	90 e0       	ldi	r25, 0x00	; 0
    13aa:	9e 83       	std	Y+6, r25	; 0x06
    13ac:	8d 83       	std	Y+5, r24	; 0x05
    13ae:	3f c0       	rjmp	.+126    	; 0x142e <Seven_Segment_Multiplexed_Display_Time+0x72c>
	else if (__tmp > 65535)
    13b0:	6f 81       	ldd	r22, Y+7	; 0x07
    13b2:	78 85       	ldd	r23, Y+8	; 0x08
    13b4:	89 85       	ldd	r24, Y+9	; 0x09
    13b6:	9a 85       	ldd	r25, Y+10	; 0x0a
    13b8:	20 e0       	ldi	r18, 0x00	; 0
    13ba:	3f ef       	ldi	r19, 0xFF	; 255
    13bc:	4f e7       	ldi	r20, 0x7F	; 127
    13be:	57 e4       	ldi	r21, 0x47	; 71
    13c0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    13c4:	18 16       	cp	r1, r24
    13c6:	4c f5       	brge	.+82     	; 0x141a <Seven_Segment_Multiplexed_Display_Time+0x718>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    13c8:	6b 85       	ldd	r22, Y+11	; 0x0b
    13ca:	7c 85       	ldd	r23, Y+12	; 0x0c
    13cc:	8d 85       	ldd	r24, Y+13	; 0x0d
    13ce:	9e 85       	ldd	r25, Y+14	; 0x0e
    13d0:	20 e0       	ldi	r18, 0x00	; 0
    13d2:	30 e0       	ldi	r19, 0x00	; 0
    13d4:	40 e2       	ldi	r20, 0x20	; 32
    13d6:	51 e4       	ldi	r21, 0x41	; 65
    13d8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13dc:	dc 01       	movw	r26, r24
    13de:	cb 01       	movw	r24, r22
    13e0:	bc 01       	movw	r22, r24
    13e2:	cd 01       	movw	r24, r26
    13e4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13e8:	dc 01       	movw	r26, r24
    13ea:	cb 01       	movw	r24, r22
    13ec:	9e 83       	std	Y+6, r25	; 0x06
    13ee:	8d 83       	std	Y+5, r24	; 0x05
    13f0:	0f c0       	rjmp	.+30     	; 0x1410 <Seven_Segment_Multiplexed_Display_Time+0x70e>
    13f2:	80 e9       	ldi	r24, 0x90	; 144
    13f4:	91 e0       	ldi	r25, 0x01	; 1
    13f6:	9c 83       	std	Y+4, r25	; 0x04
    13f8:	8b 83       	std	Y+3, r24	; 0x03
    13fa:	8b 81       	ldd	r24, Y+3	; 0x03
    13fc:	9c 81       	ldd	r25, Y+4	; 0x04
    13fe:	01 97       	sbiw	r24, 0x01	; 1
    1400:	f1 f7       	brne	.-4      	; 0x13fe <Seven_Segment_Multiplexed_Display_Time+0x6fc>
    1402:	9c 83       	std	Y+4, r25	; 0x04
    1404:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1406:	8d 81       	ldd	r24, Y+5	; 0x05
    1408:	9e 81       	ldd	r25, Y+6	; 0x06
    140a:	01 97       	sbiw	r24, 0x01	; 1
    140c:	9e 83       	std	Y+6, r25	; 0x06
    140e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1410:	8d 81       	ldd	r24, Y+5	; 0x05
    1412:	9e 81       	ldd	r25, Y+6	; 0x06
    1414:	00 97       	sbiw	r24, 0x00	; 0
    1416:	69 f7       	brne	.-38     	; 0x13f2 <Seven_Segment_Multiplexed_Display_Time+0x6f0>
    1418:	14 c0       	rjmp	.+40     	; 0x1442 <Seven_Segment_Multiplexed_Display_Time+0x740>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    141a:	6f 81       	ldd	r22, Y+7	; 0x07
    141c:	78 85       	ldd	r23, Y+8	; 0x08
    141e:	89 85       	ldd	r24, Y+9	; 0x09
    1420:	9a 85       	ldd	r25, Y+10	; 0x0a
    1422:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1426:	dc 01       	movw	r26, r24
    1428:	cb 01       	movw	r24, r22
    142a:	9e 83       	std	Y+6, r25	; 0x06
    142c:	8d 83       	std	Y+5, r24	; 0x05
    142e:	8d 81       	ldd	r24, Y+5	; 0x05
    1430:	9e 81       	ldd	r25, Y+6	; 0x06
    1432:	9a 83       	std	Y+2, r25	; 0x02
    1434:	89 83       	std	Y+1, r24	; 0x01
    1436:	89 81       	ldd	r24, Y+1	; 0x01
    1438:	9a 81       	ldd	r25, Y+2	; 0x02
    143a:	01 97       	sbiw	r24, 0x01	; 1
    143c:	f1 f7       	brne	.-4      	; 0x143a <Seven_Segment_Multiplexed_Display_Time+0x738>
    143e:	9a 83       	std	Y+2, r25	; 0x02
    1440:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(2);										/*delay to show the number on 7-segment*/
}
    1442:	cc 5a       	subi	r28, 0xAC	; 172
    1444:	df 4f       	sbci	r29, 0xFF	; 255
    1446:	0f b6       	in	r0, 0x3f	; 63
    1448:	f8 94       	cli
    144a:	de bf       	out	0x3e, r29	; 62
    144c:	0f be       	out	0x3f, r0	; 63
    144e:	cd bf       	out	0x3d, r28	; 61
    1450:	cf 91       	pop	r28
    1452:	df 91       	pop	r29
    1454:	1f 91       	pop	r17
    1456:	0f 91       	pop	r16
    1458:	08 95       	ret

0000145a <TIMER1_CTC_Init>:
 * F_timer   = (F_CPU/N)   = (16Mhz/1024) = 16Khz
 * T_timer   = (1/F_timer) = (1/16Khz)    = 62.5microsec
 * T_compare = 16000 * 62.5micro = 1sec
 * number_of_compare_matches_per_second = (1/1)= 1
 */
void TIMER1_CTC_Init(void) {
    145a:	df 93       	push	r29
    145c:	cf 93       	push	r28
    145e:	cd b7       	in	r28, 0x3d	; 61
    1460:	de b7       	in	r29, 0x3e	; 62
	TCCR1A = (1 << FOC1A)| (1<<FOC1B);				  //set 2 bits if specifies a non-PWM mode
    1462:	ef e4       	ldi	r30, 0x4F	; 79
    1464:	f0 e0       	ldi	r31, 0x00	; 0
    1466:	8c e0       	ldi	r24, 0x0C	; 12
    1468:	80 83       	st	Z, r24
	TCCR1B = (1 << WGM12) | (1 << CS10) | (1 << CS12);//CTC Mode , top =OCR1A ,pre-scaler 1024
    146a:	ee e4       	ldi	r30, 0x4E	; 78
    146c:	f0 e0       	ldi	r31, 0x00	; 0
    146e:	8d e0       	ldi	r24, 0x0D	; 13
    1470:	80 83       	st	Z, r24
	TCNT1 = 0;    									  // start timer from 0
    1472:	ec e4       	ldi	r30, 0x4C	; 76
    1474:	f0 e0       	ldi	r31, 0x00	; 0
    1476:	11 82       	std	Z+1, r1	; 0x01
    1478:	10 82       	st	Z, r1
	OCR1A = 16000;									  //set compare match value for 1 second
    147a:	ea e4       	ldi	r30, 0x4A	; 74
    147c:	f0 e0       	ldi	r31, 0x00	; 0
    147e:	80 e8       	ldi	r24, 0x80	; 128
    1480:	9e e3       	ldi	r25, 0x3E	; 62
    1482:	91 83       	std	Z+1, r25	; 0x01
    1484:	80 83       	st	Z, r24
	TIMSK |= (1 << OCIE1A);							  // enable output compare A match interrupt
    1486:	a9 e5       	ldi	r26, 0x59	; 89
    1488:	b0 e0       	ldi	r27, 0x00	; 0
    148a:	e9 e5       	ldi	r30, 0x59	; 89
    148c:	f0 e0       	ldi	r31, 0x00	; 0
    148e:	80 81       	ld	r24, Z
    1490:	80 61       	ori	r24, 0x10	; 16
    1492:	8c 93       	st	X, r24
	SREG |=(1<<7);
    1494:	af e5       	ldi	r26, 0x5F	; 95
    1496:	b0 e0       	ldi	r27, 0x00	; 0
    1498:	ef e5       	ldi	r30, 0x5F	; 95
    149a:	f0 e0       	ldi	r31, 0x00	; 0
    149c:	80 81       	ld	r24, Z
    149e:	80 68       	ori	r24, 0x80	; 128
    14a0:	8c 93       	st	X, r24
}
    14a2:	cf 91       	pop	r28
    14a4:	df 91       	pop	r29
    14a6:	08 95       	ret

000014a8 <INT0_Init>:
/************************************************************************************
 * Function Name   : INT0_Init
 * Function Inputs : void
 * Description     : Function to initialize INT0.
 ************************************************************************************/
void INT0_Init(void) {
    14a8:	df 93       	push	r29
    14aa:	cf 93       	push	r28
    14ac:	cd b7       	in	r28, 0x3d	; 61
    14ae:	de b7       	in	r29, 0x3e	; 62
	//Works with falling edge
	DDRD  &= ~(1 << PD2);		//define PD2 as input
    14b0:	a1 e3       	ldi	r26, 0x31	; 49
    14b2:	b0 e0       	ldi	r27, 0x00	; 0
    14b4:	e1 e3       	ldi	r30, 0x31	; 49
    14b6:	f0 e0       	ldi	r31, 0x00	; 0
    14b8:	80 81       	ld	r24, Z
    14ba:	8b 7f       	andi	r24, 0xFB	; 251
    14bc:	8c 93       	st	X, r24
	MCUCR |= (1 << ISC01);  	//falling edge configuration
    14be:	a5 e5       	ldi	r26, 0x55	; 85
    14c0:	b0 e0       	ldi	r27, 0x00	; 0
    14c2:	e5 e5       	ldi	r30, 0x55	; 85
    14c4:	f0 e0       	ldi	r31, 0x00	; 0
    14c6:	80 81       	ld	r24, Z
    14c8:	82 60       	ori	r24, 0x02	; 2
    14ca:	8c 93       	st	X, r24
	GICR  |= (1 << INT0);   	//external INT0 enable
    14cc:	ab e5       	ldi	r26, 0x5B	; 91
    14ce:	b0 e0       	ldi	r27, 0x00	; 0
    14d0:	eb e5       	ldi	r30, 0x5B	; 91
    14d2:	f0 e0       	ldi	r31, 0x00	; 0
    14d4:	80 81       	ld	r24, Z
    14d6:	80 64       	ori	r24, 0x40	; 64
    14d8:	8c 93       	st	X, r24
	PORTD |= (1 << PD2);		//internal pull-up resistor for PD2
    14da:	a2 e3       	ldi	r26, 0x32	; 50
    14dc:	b0 e0       	ldi	r27, 0x00	; 0
    14de:	e2 e3       	ldi	r30, 0x32	; 50
    14e0:	f0 e0       	ldi	r31, 0x00	; 0
    14e2:	80 81       	ld	r24, Z
    14e4:	84 60       	ori	r24, 0x04	; 4
    14e6:	8c 93       	st	X, r24
}
    14e8:	cf 91       	pop	r28
    14ea:	df 91       	pop	r29
    14ec:	08 95       	ret

000014ee <INT1_Init>:
/************************************************************************************
 * Function Name   : INT1_Init
 * Function Inputs : void
 * Description     : Function to initialize INT1.
 ************************************************************************************/
void INT1_Init(void) {
    14ee:	df 93       	push	r29
    14f0:	cf 93       	push	r28
    14f2:	cd b7       	in	r28, 0x3d	; 61
    14f4:	de b7       	in	r29, 0x3e	; 62
	//Works with raising edge
	DDRD  &= ~(1 << PD3);					//define PD3 as input
    14f6:	a1 e3       	ldi	r26, 0x31	; 49
    14f8:	b0 e0       	ldi	r27, 0x00	; 0
    14fa:	e1 e3       	ldi	r30, 0x31	; 49
    14fc:	f0 e0       	ldi	r31, 0x00	; 0
    14fe:	80 81       	ld	r24, Z
    1500:	87 7f       	andi	r24, 0xF7	; 247
    1502:	8c 93       	st	X, r24
	MCUCR |= (1 << ISC10) | (1 << ISC11);	//rising edge configuration
    1504:	a5 e5       	ldi	r26, 0x55	; 85
    1506:	b0 e0       	ldi	r27, 0x00	; 0
    1508:	e5 e5       	ldi	r30, 0x55	; 85
    150a:	f0 e0       	ldi	r31, 0x00	; 0
    150c:	80 81       	ld	r24, Z
    150e:	8c 60       	ori	r24, 0x0C	; 12
    1510:	8c 93       	st	X, r24
	GICR  |= (1 << INT1);					//external INT1 enable
    1512:	ab e5       	ldi	r26, 0x5B	; 91
    1514:	b0 e0       	ldi	r27, 0x00	; 0
    1516:	eb e5       	ldi	r30, 0x5B	; 91
    1518:	f0 e0       	ldi	r31, 0x00	; 0
    151a:	80 81       	ld	r24, Z
    151c:	80 68       	ori	r24, 0x80	; 128
    151e:	8c 93       	st	X, r24
}
    1520:	cf 91       	pop	r28
    1522:	df 91       	pop	r29
    1524:	08 95       	ret

00001526 <INT2_Init>:
/************************************************************************************
 * Function Name   : INT2_Init
 * Function Inputs : void
 * Description     : Function to initialize INT2.
 ************************************************************************************/
void INT2_Init(void) {
    1526:	df 93       	push	r29
    1528:	cf 93       	push	r28
    152a:	cd b7       	in	r28, 0x3d	; 61
    152c:	de b7       	in	r29, 0x3e	; 62
	//Works with falling edge
	DDRB &= ~(1 << PB2);		//define PB2 as input
    152e:	a7 e3       	ldi	r26, 0x37	; 55
    1530:	b0 e0       	ldi	r27, 0x00	; 0
    1532:	e7 e3       	ldi	r30, 0x37	; 55
    1534:	f0 e0       	ldi	r31, 0x00	; 0
    1536:	80 81       	ld	r24, Z
    1538:	8b 7f       	andi	r24, 0xFB	; 251
    153a:	8c 93       	st	X, r24
	MCUCSR &= ~(1 << ISC2);		//falling edge configuration
    153c:	a4 e5       	ldi	r26, 0x54	; 84
    153e:	b0 e0       	ldi	r27, 0x00	; 0
    1540:	e4 e5       	ldi	r30, 0x54	; 84
    1542:	f0 e0       	ldi	r31, 0x00	; 0
    1544:	80 81       	ld	r24, Z
    1546:	8f 7b       	andi	r24, 0xBF	; 191
    1548:	8c 93       	st	X, r24
	GICR |= (1 << INT2);		//external INT2 enable
    154a:	ab e5       	ldi	r26, 0x5B	; 91
    154c:	b0 e0       	ldi	r27, 0x00	; 0
    154e:	eb e5       	ldi	r30, 0x5B	; 91
    1550:	f0 e0       	ldi	r31, 0x00	; 0
    1552:	80 81       	ld	r24, Z
    1554:	80 62       	ori	r24, 0x20	; 32
    1556:	8c 93       	st	X, r24
	PORTB |= (1 << PB2);		//internal pull-up resistor for PB2
    1558:	a8 e3       	ldi	r26, 0x38	; 56
    155a:	b0 e0       	ldi	r27, 0x00	; 0
    155c:	e8 e3       	ldi	r30, 0x38	; 56
    155e:	f0 e0       	ldi	r31, 0x00	; 0
    1560:	80 81       	ld	r24, Z
    1562:	84 60       	ori	r24, 0x04	; 4
    1564:	8c 93       	st	X, r24
}
    1566:	cf 91       	pop	r28
    1568:	df 91       	pop	r29
    156a:	08 95       	ret

0000156c <Select_Mode>:
/************************************************************************************
 * Function Name   : Select_Mode
 * Function Inputs : void
 * Description     : Function to select mode (count up mode (default) or count down mode).
************************************************************************************/
void Select_Mode(void) {
    156c:	df 93       	push	r29
    156e:	cf 93       	push	r28
    1570:	cd b7       	in	r28, 0x3d	; 61
    1572:	de b7       	in	r29, 0x3e	; 62

	if (toggle_mode==1)  // select count down mode
    1574:	80 91 73 00 	lds	r24, 0x0073
    1578:	81 30       	cpi	r24, 0x01	; 1
    157a:	09 f0       	breq	.+2      	; 0x157e <Select_Mode+0x12>
    157c:	d8 c0       	rjmp	.+432    	; 0x172e <Select_Mode+0x1c2>
	{
		toggle_to_count_down_mode = 1;
    157e:	81 e0       	ldi	r24, 0x01	; 1
    1580:	80 93 6b 00 	sts	0x006B, r24
		PORTD |= (1 << PD5); 	// Turn on yellow LED for count down mode
    1584:	a2 e3       	ldi	r26, 0x32	; 50
    1586:	b0 e0       	ldi	r27, 0x00	; 0
    1588:	e2 e3       	ldi	r30, 0x32	; 50
    158a:	f0 e0       	ldi	r31, 0x00	; 0
    158c:	80 81       	ld	r24, Z
    158e:	80 62       	ori	r24, 0x20	; 32
    1590:	8c 93       	st	X, r24
		PORTD &= ~(1 << PD4); 	// Turn off red LED for count up mode
    1592:	a2 e3       	ldi	r26, 0x32	; 50
    1594:	b0 e0       	ldi	r27, 0x00	; 0
    1596:	e2 e3       	ldi	r30, 0x32	; 50
    1598:	f0 e0       	ldi	r31, 0x00	; 0
    159a:	80 81       	ld	r24, Z
    159c:	8f 7e       	andi	r24, 0xEF	; 239
    159e:	8c 93       	st	X, r24

		/* Hours_INC	 Hours_DEC	|  MIN_INC	MIN_DEC  | SEC_INC  SEC_DEC     */
		/*  PB1 		  PB0       |  PB4       PB3     | PB6       PB5  		*/
/**************************************Adjust hours**************************************/
		if (!(PINB & (1 << PB1))) 			//if PB1 is pressed, hours will increment by one every press
    15a0:	e6 e3       	ldi	r30, 0x36	; 54
    15a2:	f0 e0       	ldi	r31, 0x00	; 0
    15a4:	80 81       	ld	r24, Z
    15a6:	88 2f       	mov	r24, r24
    15a8:	90 e0       	ldi	r25, 0x00	; 0
    15aa:	82 70       	andi	r24, 0x02	; 2
    15ac:	90 70       	andi	r25, 0x00	; 0
    15ae:	00 97       	sbiw	r24, 0x00	; 0
    15b0:	a1 f4       	brne	.+40     	; 0x15da <Select_Mode+0x6e>
		{
			if (hours_INC_flag == 0) 		//to ensure that io one press only
    15b2:	80 91 6c 00 	lds	r24, 0x006C
    15b6:	88 23       	and	r24, r24
    15b8:	91 f4       	brne	.+36     	; 0x15de <Select_Mode+0x72>
			{
				hours = (hours + 1) % 25;   //increment hours within range 0:24
    15ba:	80 91 6a 00 	lds	r24, 0x006A
    15be:	88 2f       	mov	r24, r24
    15c0:	90 e0       	ldi	r25, 0x00	; 0
    15c2:	01 96       	adiw	r24, 0x01	; 1
    15c4:	29 e1       	ldi	r18, 0x19	; 25
    15c6:	30 e0       	ldi	r19, 0x00	; 0
    15c8:	b9 01       	movw	r22, r18
    15ca:	0e 94 d9 0c 	call	0x19b2	; 0x19b2 <__divmodhi4>
    15ce:	80 93 6a 00 	sts	0x006A, r24
				hours_INC_flag = 1;
    15d2:	81 e0       	ldi	r24, 0x01	; 1
    15d4:	80 93 6c 00 	sts	0x006C, r24
    15d8:	02 c0       	rjmp	.+4      	; 0x15de <Select_Mode+0x72>
			}
		 } else
			{
				hours_INC_flag = 0;			// reset the flag when the button is released
    15da:	10 92 6c 00 	sts	0x006C, r1
			}

		 Seven_Segment_Multiplexed_Display_Time(); // Display six multiplexed 7-segment time
    15de:	0e 94 81 06 	call	0xd02	; 0xd02 <Seven_Segment_Multiplexed_Display_Time>

		 if (!(PINB & (1 << PB0)))  			//if PB0 is pressed, hours will decrement by one every press
    15e2:	e6 e3       	ldi	r30, 0x36	; 54
    15e4:	f0 e0       	ldi	r31, 0x00	; 0
    15e6:	80 81       	ld	r24, Z
    15e8:	88 2f       	mov	r24, r24
    15ea:	90 e0       	ldi	r25, 0x00	; 0
    15ec:	81 70       	andi	r24, 0x01	; 1
    15ee:	90 70       	andi	r25, 0x00	; 0
    15f0:	00 97       	sbiw	r24, 0x00	; 0
    15f2:	a1 f4       	brne	.+40     	; 0x161c <Select_Mode+0xb0>
		 {

			 if (hours_DEC_flag == 0) 			//to ensure that is one press only
    15f4:	80 91 6d 00 	lds	r24, 0x006D
    15f8:	88 23       	and	r24, r24
    15fa:	91 f4       	brne	.+36     	; 0x1620 <Select_Mode+0xb4>
			 {
				 hours = (hours + 24) % 25; 	//decrement hours within range 0:24
    15fc:	80 91 6a 00 	lds	r24, 0x006A
    1600:	88 2f       	mov	r24, r24
    1602:	90 e0       	ldi	r25, 0x00	; 0
    1604:	48 96       	adiw	r24, 0x18	; 24
    1606:	29 e1       	ldi	r18, 0x19	; 25
    1608:	30 e0       	ldi	r19, 0x00	; 0
    160a:	b9 01       	movw	r22, r18
    160c:	0e 94 d9 0c 	call	0x19b2	; 0x19b2 <__divmodhi4>
    1610:	80 93 6a 00 	sts	0x006A, r24
				 hours_DEC_flag = 1;
    1614:	81 e0       	ldi	r24, 0x01	; 1
    1616:	80 93 6d 00 	sts	0x006D, r24
    161a:	02 c0       	rjmp	.+4      	; 0x1620 <Select_Mode+0xb4>
			 }
		 } else
		 	 {
			 	 hours_DEC_flag = 0; 			// reset the flag when the button is released
    161c:	10 92 6d 00 	sts	0x006D, r1
		 	 }
		 Seven_Segment_Multiplexed_Display_Time(); // Display six multiplexed 7-segment time
    1620:	0e 94 81 06 	call	0xd02	; 0xd02 <Seven_Segment_Multiplexed_Display_Time>

/**************************************Adjust minutes**************************************/
		 if (!(PINB & (1 << PB4)))  			//if PB4 is pressed, minutes will increment by one every press
    1624:	e6 e3       	ldi	r30, 0x36	; 54
    1626:	f0 e0       	ldi	r31, 0x00	; 0
    1628:	80 81       	ld	r24, Z
    162a:	88 2f       	mov	r24, r24
    162c:	90 e0       	ldi	r25, 0x00	; 0
    162e:	80 71       	andi	r24, 0x10	; 16
    1630:	90 70       	andi	r25, 0x00	; 0
    1632:	00 97       	sbiw	r24, 0x00	; 0
    1634:	a1 f4       	brne	.+40     	; 0x165e <Select_Mode+0xf2>
		 {
			 if (minutes_INC_flag == 0)  		//to ensure that is one press only
    1636:	80 91 6e 00 	lds	r24, 0x006E
    163a:	88 23       	and	r24, r24
    163c:	91 f4       	brne	.+36     	; 0x1662 <Select_Mode+0xf6>
			 {
				 minutes = (minutes + 1) % 60; //increment minutes within range 0:59
    163e:	80 91 69 00 	lds	r24, 0x0069
    1642:	88 2f       	mov	r24, r24
    1644:	90 e0       	ldi	r25, 0x00	; 0
    1646:	01 96       	adiw	r24, 0x01	; 1
    1648:	2c e3       	ldi	r18, 0x3C	; 60
    164a:	30 e0       	ldi	r19, 0x00	; 0
    164c:	b9 01       	movw	r22, r18
    164e:	0e 94 d9 0c 	call	0x19b2	; 0x19b2 <__divmodhi4>
    1652:	80 93 69 00 	sts	0x0069, r24
				 minutes_INC_flag = 1;
    1656:	81 e0       	ldi	r24, 0x01	; 1
    1658:	80 93 6e 00 	sts	0x006E, r24
    165c:	02 c0       	rjmp	.+4      	; 0x1662 <Select_Mode+0xf6>
			 }
		 } else
		 	 {
			 	 minutes_INC_flag = 0;			// reset the flag when the button is released
    165e:	10 92 6e 00 	sts	0x006E, r1
		 	 }
	  Seven_Segment_Multiplexed_Display_Time(); // Display six multiplexed 7-segment time
    1662:	0e 94 81 06 	call	0xd02	; 0xd02 <Seven_Segment_Multiplexed_Display_Time>
	  if (!(PINB & (1 << PB3))) 				//if PB3 is pressed, seconds will decrement by one every press
    1666:	e6 e3       	ldi	r30, 0x36	; 54
    1668:	f0 e0       	ldi	r31, 0x00	; 0
    166a:	80 81       	ld	r24, Z
    166c:	88 2f       	mov	r24, r24
    166e:	90 e0       	ldi	r25, 0x00	; 0
    1670:	88 70       	andi	r24, 0x08	; 8
    1672:	90 70       	andi	r25, 0x00	; 0
    1674:	00 97       	sbiw	r24, 0x00	; 0
    1676:	a1 f4       	brne	.+40     	; 0x16a0 <Select_Mode+0x134>
	  {

		if (minutes_DEC_flag == 0) 					//to ensure that is one press only
    1678:	80 91 6f 00 	lds	r24, 0x006F
    167c:	88 23       	and	r24, r24
    167e:	91 f4       	brne	.+36     	; 0x16a4 <Select_Mode+0x138>
			{
			 	 minutes = (minutes + 59) % 60;		//decrement minutes within range 0:59
    1680:	80 91 69 00 	lds	r24, 0x0069
    1684:	88 2f       	mov	r24, r24
    1686:	90 e0       	ldi	r25, 0x00	; 0
    1688:	cb 96       	adiw	r24, 0x3b	; 59
    168a:	2c e3       	ldi	r18, 0x3C	; 60
    168c:	30 e0       	ldi	r19, 0x00	; 0
    168e:	b9 01       	movw	r22, r18
    1690:	0e 94 d9 0c 	call	0x19b2	; 0x19b2 <__divmodhi4>
    1694:	80 93 69 00 	sts	0x0069, r24
			 	 minutes_DEC_flag = 1;
    1698:	81 e0       	ldi	r24, 0x01	; 1
    169a:	80 93 6f 00 	sts	0x006F, r24
    169e:	02 c0       	rjmp	.+4      	; 0x16a4 <Select_Mode+0x138>
			}
	  } else
		{

		minutes_DEC_flag = 0;						// reset the flag when the button is released
    16a0:	10 92 6f 00 	sts	0x006F, r1
		}
	  Seven_Segment_Multiplexed_Display_Time(); // Display six multiplexed 7-segment time
    16a4:	0e 94 81 06 	call	0xd02	; 0xd02 <Seven_Segment_Multiplexed_Display_Time>

/**************************************Adjust seconds**************************************/

	  	 if (!(PINB & (1 << PB6)))  			//if PB6 is pressed, seconds will increment by one every press
    16a8:	e6 e3       	ldi	r30, 0x36	; 54
    16aa:	f0 e0       	ldi	r31, 0x00	; 0
    16ac:	80 81       	ld	r24, Z
    16ae:	88 2f       	mov	r24, r24
    16b0:	90 e0       	ldi	r25, 0x00	; 0
    16b2:	80 74       	andi	r24, 0x40	; 64
    16b4:	90 70       	andi	r25, 0x00	; 0
    16b6:	00 97       	sbiw	r24, 0x00	; 0
    16b8:	a1 f4       	brne	.+40     	; 0x16e2 <Select_Mode+0x176>
	  	  {
	  		  if (seconds_INC_flag == 0) 		//to ensure that is one press only
    16ba:	80 91 70 00 	lds	r24, 0x0070
    16be:	88 23       	and	r24, r24
    16c0:	91 f4       	brne	.+36     	; 0x16e6 <Select_Mode+0x17a>
	  		  {
	  			  seconds = (seconds + 1) % 60;	//increment seconds within range 0:59
    16c2:	80 91 68 00 	lds	r24, 0x0068
    16c6:	88 2f       	mov	r24, r24
    16c8:	90 e0       	ldi	r25, 0x00	; 0
    16ca:	01 96       	adiw	r24, 0x01	; 1
    16cc:	2c e3       	ldi	r18, 0x3C	; 60
    16ce:	30 e0       	ldi	r19, 0x00	; 0
    16d0:	b9 01       	movw	r22, r18
    16d2:	0e 94 d9 0c 	call	0x19b2	; 0x19b2 <__divmodhi4>
    16d6:	80 93 68 00 	sts	0x0068, r24
	  			  seconds_INC_flag = 1;
    16da:	81 e0       	ldi	r24, 0x01	; 1
    16dc:	80 93 70 00 	sts	0x0070, r24
    16e0:	02 c0       	rjmp	.+4      	; 0x16e6 <Select_Mode+0x17a>
	  		  }
	  	  } else
	  	  	  {
	  		  	  seconds_INC_flag = 0;			// reset the flag when the button is released
    16e2:	10 92 70 00 	sts	0x0070, r1
	  	  	  }
	  	 Seven_Segment_Multiplexed_Display_Time(); // Display six multiplexed 7-segment time
    16e6:	0e 94 81 06 	call	0xd02	; 0xd02 <Seven_Segment_Multiplexed_Display_Time>

	  	 if (!(PINB & (1 << PB5)))  			//if PB5 is pressed, seconds will decrement by one every press
    16ea:	e6 e3       	ldi	r30, 0x36	; 54
    16ec:	f0 e0       	ldi	r31, 0x00	; 0
    16ee:	80 81       	ld	r24, Z
    16f0:	88 2f       	mov	r24, r24
    16f2:	90 e0       	ldi	r25, 0x00	; 0
    16f4:	80 72       	andi	r24, 0x20	; 32
    16f6:	90 70       	andi	r25, 0x00	; 0
    16f8:	00 97       	sbiw	r24, 0x00	; 0
    16fa:	a1 f4       	brne	.+40     	; 0x1724 <Select_Mode+0x1b8>
	  	 {
	  		 if (seconds_DEC_flag == 0) 		//to ensure that is one press only
    16fc:	80 91 71 00 	lds	r24, 0x0071
    1700:	88 23       	and	r24, r24
    1702:	91 f4       	brne	.+36     	; 0x1728 <Select_Mode+0x1bc>
	  		 {
	  			 seconds = (seconds + 59) % 60; //decrement seconds within range 0:59
    1704:	80 91 68 00 	lds	r24, 0x0068
    1708:	88 2f       	mov	r24, r24
    170a:	90 e0       	ldi	r25, 0x00	; 0
    170c:	cb 96       	adiw	r24, 0x3b	; 59
    170e:	2c e3       	ldi	r18, 0x3C	; 60
    1710:	30 e0       	ldi	r19, 0x00	; 0
    1712:	b9 01       	movw	r22, r18
    1714:	0e 94 d9 0c 	call	0x19b2	; 0x19b2 <__divmodhi4>
    1718:	80 93 68 00 	sts	0x0068, r24
	  			 seconds_DEC_flag = 1;
    171c:	81 e0       	ldi	r24, 0x01	; 1
    171e:	80 93 71 00 	sts	0x0071, r24
    1722:	02 c0       	rjmp	.+4      	; 0x1728 <Select_Mode+0x1bc>
	  		 }
	  	 } else
	  	 	 {
	  		 	 seconds_DEC_flag = 0;			// reset the flag when the button is released
    1724:	10 92 71 00 	sts	0x0071, r1
	  	 	 }

	  Seven_Segment_Multiplexed_Display_Time(); // Display six multiplexed 7-segment time
    1728:	0e 94 81 06 	call	0xd02	; 0xd02 <Seven_Segment_Multiplexed_Display_Time>
    172c:	17 c0       	rjmp	.+46     	; 0x175c <Select_Mode+0x1f0>

		}
		 else
		 {
			PORTD &= ~(1 << PD5); 						// Turn off yellow LED for count down
    172e:	a2 e3       	ldi	r26, 0x32	; 50
    1730:	b0 e0       	ldi	r27, 0x00	; 0
    1732:	e2 e3       	ldi	r30, 0x32	; 50
    1734:	f0 e0       	ldi	r31, 0x00	; 0
    1736:	80 81       	ld	r24, Z
    1738:	8f 7d       	andi	r24, 0xDF	; 223
    173a:	8c 93       	st	X, r24
			PORTD &= ~(1 << PD0); 						// Turn off BUZZER
    173c:	a2 e3       	ldi	r26, 0x32	; 50
    173e:	b0 e0       	ldi	r27, 0x00	; 0
    1740:	e2 e3       	ldi	r30, 0x32	; 50
    1742:	f0 e0       	ldi	r31, 0x00	; 0
    1744:	80 81       	ld	r24, Z
    1746:	8e 7f       	andi	r24, 0xFE	; 254
    1748:	8c 93       	st	X, r24
			toggle_to_count_down_mode = 0; 				// Turn off count down mode
    174a:	10 92 6b 00 	sts	0x006B, r1
			PORTD |= (1 << PD4); 						// Turn on red LED for count up mode
    174e:	a2 e3       	ldi	r26, 0x32	; 50
    1750:	b0 e0       	ldi	r27, 0x00	; 0
    1752:	e2 e3       	ldi	r30, 0x32	; 50
    1754:	f0 e0       	ldi	r31, 0x00	; 0
    1756:	80 81       	ld	r24, Z
    1758:	80 61       	ori	r24, 0x10	; 16
    175a:	8c 93       	st	X, r24
		 }
}
    175c:	cf 91       	pop	r28
    175e:	df 91       	pop	r29
    1760:	08 95       	ret

00001762 <main>:

/******************************************main function******************************************/
int main(void) {
    1762:	df 93       	push	r29
    1764:	cf 93       	push	r28
    1766:	cd b7       	in	r28, 0x3d	; 61
    1768:	de b7       	in	r29, 0x3e	; 62
    176a:	2f 97       	sbiw	r28, 0x0f	; 15
    176c:	0f b6       	in	r0, 0x3f	; 63
    176e:	f8 94       	cli
    1770:	de bf       	out	0x3e, r29	; 62
    1772:	0f be       	out	0x3f, r0	; 63
    1774:	cd bf       	out	0x3d, r28	; 61

	SREG |= (1 << 7);					//enable global interrupt (I-Bit)
    1776:	af e5       	ldi	r26, 0x5F	; 95
    1778:	b0 e0       	ldi	r27, 0x00	; 0
    177a:	ef e5       	ldi	r30, 0x5F	; 95
    177c:	f0 e0       	ldi	r31, 0x00	; 0
    177e:	80 81       	ld	r24, Z
    1780:	80 68       	ori	r24, 0x80	; 128
    1782:	8c 93       	st	X, r24

	DDRD  |=(1<<0);						//Set PD0 to Buzzer as output
    1784:	a1 e3       	ldi	r26, 0x31	; 49
    1786:	b0 e0       	ldi	r27, 0x00	; 0
    1788:	e1 e3       	ldi	r30, 0x31	; 49
    178a:	f0 e0       	ldi	r31, 0x00	; 0
    178c:	80 81       	ld	r24, Z
    178e:	81 60       	ori	r24, 0x01	; 1
    1790:	8c 93       	st	X, r24
	PORTD &= ~(1<<0);					//turn off the buzzer at the beginning
    1792:	a2 e3       	ldi	r26, 0x32	; 50
    1794:	b0 e0       	ldi	r27, 0x00	; 0
    1796:	e2 e3       	ldi	r30, 0x32	; 50
    1798:	f0 e0       	ldi	r31, 0x00	; 0
    179a:	80 81       	ld	r24, Z
    179c:	8e 7f       	andi	r24, 0xFE	; 254
    179e:	8c 93       	st	X, r24

	DDRD  |= (1<<4) | (1<<5);			//Set 2 led red yellow as output pins
    17a0:	a1 e3       	ldi	r26, 0x31	; 49
    17a2:	b0 e0       	ldi	r27, 0x00	; 0
    17a4:	e1 e3       	ldi	r30, 0x31	; 49
    17a6:	f0 e0       	ldi	r31, 0x00	; 0
    17a8:	80 81       	ld	r24, Z
    17aa:	80 63       	ori	r24, 0x30	; 48
    17ac:	8c 93       	st	X, r24
	PORTD |= (1<<4);					//by default turn on count up (red) led
    17ae:	a2 e3       	ldi	r26, 0x32	; 50
    17b0:	b0 e0       	ldi	r27, 0x00	; 0
    17b2:	e2 e3       	ldi	r30, 0x32	; 50
    17b4:	f0 e0       	ldi	r31, 0x00	; 0
    17b6:	80 81       	ld	r24, Z
    17b8:	80 61       	ori	r24, 0x10	; 16
    17ba:	8c 93       	st	X, r24
	PORTD &= ~(1<<5);					//by default turn off count down (yellow) led
    17bc:	a2 e3       	ldi	r26, 0x32	; 50
    17be:	b0 e0       	ldi	r27, 0x00	; 0
    17c0:	e2 e3       	ldi	r30, 0x32	; 50
    17c2:	f0 e0       	ldi	r31, 0x00	; 0
    17c4:	80 81       	ld	r24, Z
    17c6:	8f 7d       	andi	r24, 0xDF	; 223
    17c8:	8c 93       	st	X, r24

	DDRB  = 0x00;						// Set pin 7 in PORTB as input pin (buttons)
    17ca:	e7 e3       	ldi	r30, 0x37	; 55
    17cc:	f0 e0       	ldi	r31, 0x00	; 0
    17ce:	10 82       	st	Z, r1
	PORTB = 0xFF;						//internal pull-up resistor for all PortB
    17d0:	e8 e3       	ldi	r30, 0x38	; 56
    17d2:	f0 e0       	ldi	r31, 0x00	; 0
    17d4:	8f ef       	ldi	r24, 0xFF	; 255
    17d6:	80 83       	st	Z, r24

	DDRA  |= 0x7F;	 			// Set first 6-pins in PORTA as output To enable/disable the six 7-segments
    17d8:	aa e3       	ldi	r26, 0x3A	; 58
    17da:	b0 e0       	ldi	r27, 0x00	; 0
    17dc:	ea e3       	ldi	r30, 0x3A	; 58
    17de:	f0 e0       	ldi	r31, 0x00	; 0
    17e0:	80 81       	ld	r24, Z
    17e2:	8f 67       	ori	r24, 0x7F	; 127
    17e4:	8c 93       	st	X, r24
	PORTA &= 0x80;	 			// put 0 value  in PORTA to enable first 6-pins (six 7-segments)
    17e6:	ab e3       	ldi	r26, 0x3B	; 59
    17e8:	b0 e0       	ldi	r27, 0x00	; 0
    17ea:	eb e3       	ldi	r30, 0x3B	; 59
    17ec:	f0 e0       	ldi	r31, 0x00	; 0
    17ee:	80 81       	ld	r24, Z
    17f0:	80 78       	andi	r24, 0x80	; 128
    17f2:	8c 93       	st	X, r24

	DDRC  |= 0x0F;	 			// Set first 4-pins in PORTC as output pins PC0 PC1 PC2 PC3 for decoder
    17f4:	a4 e3       	ldi	r26, 0x34	; 52
    17f6:	b0 e0       	ldi	r27, 0x00	; 0
    17f8:	e4 e3       	ldi	r30, 0x34	; 52
    17fa:	f0 e0       	ldi	r31, 0x00	; 0
    17fc:	80 81       	ld	r24, Z
    17fe:	8f 60       	ori	r24, 0x0F	; 15
    1800:	8c 93       	st	X, r24
	PORTC &= 0xF0;	 			// put 0 as initial value in first 4-pins in PORTC to display 0 on 7-segments
    1802:	a5 e3       	ldi	r26, 0x35	; 53
    1804:	b0 e0       	ldi	r27, 0x00	; 0
    1806:	e5 e3       	ldi	r30, 0x35	; 53
    1808:	f0 e0       	ldi	r31, 0x00	; 0
    180a:	80 81       	ld	r24, Z
    180c:	80 7f       	andi	r24, 0xF0	; 240
    180e:	8c 93       	st	X, r24

	/*initializations*/
	TIMER1_CTC_Init();
    1810:	0e 94 2d 0a 	call	0x145a	; 0x145a <TIMER1_CTC_Init>
	INT0_Init();
    1814:	0e 94 54 0a 	call	0x14a8	; 0x14a8 <INT0_Init>
	INT1_Init();
    1818:	0e 94 77 0a 	call	0x14ee	; 0x14ee <INT1_Init>
	INT2_Init();
    181c:	0e 94 93 0a 	call	0x1526	; 0x1526 <INT2_Init>

	while (1) {

		Seven_Segment_Multiplexed_Display_Time();  		//display six multiplexed 7-segment time
    1820:	0e 94 81 06 	call	0xd02	; 0xd02 <Seven_Segment_Multiplexed_Display_Time>

		/*turn off the buzzer at not zero sec or min or hour or the timer is paused*/
		if(seconds != 0 || hours != 0 || minutes != 0 || ((TCCR1B & 0x07)==0))
    1824:	80 91 68 00 	lds	r24, 0x0068
    1828:	88 23       	and	r24, r24
    182a:	89 f4       	brne	.+34     	; 0x184e <main+0xec>
    182c:	80 91 6a 00 	lds	r24, 0x006A
    1830:	88 23       	and	r24, r24
    1832:	69 f4       	brne	.+26     	; 0x184e <main+0xec>
    1834:	80 91 69 00 	lds	r24, 0x0069
    1838:	88 23       	and	r24, r24
    183a:	49 f4       	brne	.+18     	; 0x184e <main+0xec>
    183c:	ee e4       	ldi	r30, 0x4E	; 78
    183e:	f0 e0       	ldi	r31, 0x00	; 0
    1840:	80 81       	ld	r24, Z
    1842:	88 2f       	mov	r24, r24
    1844:	90 e0       	ldi	r25, 0x00	; 0
    1846:	87 70       	andi	r24, 0x07	; 7
    1848:	90 70       	andi	r25, 0x00	; 0
    184a:	00 97       	sbiw	r24, 0x00	; 0
    184c:	39 f4       	brne	.+14     	; 0x185c <main+0xfa>
		{
			PORTD &= ~(1 << PD0);
    184e:	a2 e3       	ldi	r26, 0x32	; 50
    1850:	b0 e0       	ldi	r27, 0x00	; 0
    1852:	e2 e3       	ldi	r30, 0x32	; 50
    1854:	f0 e0       	ldi	r31, 0x00	; 0
    1856:	80 81       	ld	r24, Z
    1858:	8e 7f       	andi	r24, 0xFE	; 254
    185a:	8c 93       	st	X, r24
		}

		if (!(PINB & (1 << PB7)))  					// PB7 is pressed (toggle button)
    185c:	e6 e3       	ldi	r30, 0x36	; 54
    185e:	f0 e0       	ldi	r31, 0x00	; 0
    1860:	80 81       	ld	r24, Z
    1862:	88 23       	and	r24, r24
    1864:	0c f4       	brge	.+2      	; 0x1868 <main+0x106>
    1866:	92 c0       	rjmp	.+292    	; 0x198c <main+0x22a>
    1868:	80 e0       	ldi	r24, 0x00	; 0
    186a:	90 e0       	ldi	r25, 0x00	; 0
    186c:	a0 ef       	ldi	r26, 0xF0	; 240
    186e:	b1 e4       	ldi	r27, 0x41	; 65
    1870:	8b 87       	std	Y+11, r24	; 0x0b
    1872:	9c 87       	std	Y+12, r25	; 0x0c
    1874:	ad 87       	std	Y+13, r26	; 0x0d
    1876:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1878:	6b 85       	ldd	r22, Y+11	; 0x0b
    187a:	7c 85       	ldd	r23, Y+12	; 0x0c
    187c:	8d 85       	ldd	r24, Y+13	; 0x0d
    187e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1880:	20 e0       	ldi	r18, 0x00	; 0
    1882:	30 e0       	ldi	r19, 0x00	; 0
    1884:	4a e7       	ldi	r20, 0x7A	; 122
    1886:	55 e4       	ldi	r21, 0x45	; 69
    1888:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    188c:	dc 01       	movw	r26, r24
    188e:	cb 01       	movw	r24, r22
    1890:	8f 83       	std	Y+7, r24	; 0x07
    1892:	98 87       	std	Y+8, r25	; 0x08
    1894:	a9 87       	std	Y+9, r26	; 0x09
    1896:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1898:	6f 81       	ldd	r22, Y+7	; 0x07
    189a:	78 85       	ldd	r23, Y+8	; 0x08
    189c:	89 85       	ldd	r24, Y+9	; 0x09
    189e:	9a 85       	ldd	r25, Y+10	; 0x0a
    18a0:	20 e0       	ldi	r18, 0x00	; 0
    18a2:	30 e0       	ldi	r19, 0x00	; 0
    18a4:	40 e8       	ldi	r20, 0x80	; 128
    18a6:	5f e3       	ldi	r21, 0x3F	; 63
    18a8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    18ac:	88 23       	and	r24, r24
    18ae:	2c f4       	brge	.+10     	; 0x18ba <main+0x158>
		__ticks = 1;
    18b0:	81 e0       	ldi	r24, 0x01	; 1
    18b2:	90 e0       	ldi	r25, 0x00	; 0
    18b4:	9e 83       	std	Y+6, r25	; 0x06
    18b6:	8d 83       	std	Y+5, r24	; 0x05
    18b8:	3f c0       	rjmp	.+126    	; 0x1938 <main+0x1d6>
	else if (__tmp > 65535)
    18ba:	6f 81       	ldd	r22, Y+7	; 0x07
    18bc:	78 85       	ldd	r23, Y+8	; 0x08
    18be:	89 85       	ldd	r24, Y+9	; 0x09
    18c0:	9a 85       	ldd	r25, Y+10	; 0x0a
    18c2:	20 e0       	ldi	r18, 0x00	; 0
    18c4:	3f ef       	ldi	r19, 0xFF	; 255
    18c6:	4f e7       	ldi	r20, 0x7F	; 127
    18c8:	57 e4       	ldi	r21, 0x47	; 71
    18ca:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    18ce:	18 16       	cp	r1, r24
    18d0:	4c f5       	brge	.+82     	; 0x1924 <main+0x1c2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18d2:	6b 85       	ldd	r22, Y+11	; 0x0b
    18d4:	7c 85       	ldd	r23, Y+12	; 0x0c
    18d6:	8d 85       	ldd	r24, Y+13	; 0x0d
    18d8:	9e 85       	ldd	r25, Y+14	; 0x0e
    18da:	20 e0       	ldi	r18, 0x00	; 0
    18dc:	30 e0       	ldi	r19, 0x00	; 0
    18de:	40 e2       	ldi	r20, 0x20	; 32
    18e0:	51 e4       	ldi	r21, 0x41	; 65
    18e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18e6:	dc 01       	movw	r26, r24
    18e8:	cb 01       	movw	r24, r22
    18ea:	bc 01       	movw	r22, r24
    18ec:	cd 01       	movw	r24, r26
    18ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18f2:	dc 01       	movw	r26, r24
    18f4:	cb 01       	movw	r24, r22
    18f6:	9e 83       	std	Y+6, r25	; 0x06
    18f8:	8d 83       	std	Y+5, r24	; 0x05
    18fa:	0f c0       	rjmp	.+30     	; 0x191a <main+0x1b8>
    18fc:	80 e9       	ldi	r24, 0x90	; 144
    18fe:	91 e0       	ldi	r25, 0x01	; 1
    1900:	9c 83       	std	Y+4, r25	; 0x04
    1902:	8b 83       	std	Y+3, r24	; 0x03
    1904:	8b 81       	ldd	r24, Y+3	; 0x03
    1906:	9c 81       	ldd	r25, Y+4	; 0x04
    1908:	01 97       	sbiw	r24, 0x01	; 1
    190a:	f1 f7       	brne	.-4      	; 0x1908 <main+0x1a6>
    190c:	9c 83       	std	Y+4, r25	; 0x04
    190e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1910:	8d 81       	ldd	r24, Y+5	; 0x05
    1912:	9e 81       	ldd	r25, Y+6	; 0x06
    1914:	01 97       	sbiw	r24, 0x01	; 1
    1916:	9e 83       	std	Y+6, r25	; 0x06
    1918:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    191a:	8d 81       	ldd	r24, Y+5	; 0x05
    191c:	9e 81       	ldd	r25, Y+6	; 0x06
    191e:	00 97       	sbiw	r24, 0x00	; 0
    1920:	69 f7       	brne	.-38     	; 0x18fc <main+0x19a>
    1922:	14 c0       	rjmp	.+40     	; 0x194c <main+0x1ea>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1924:	6f 81       	ldd	r22, Y+7	; 0x07
    1926:	78 85       	ldd	r23, Y+8	; 0x08
    1928:	89 85       	ldd	r24, Y+9	; 0x09
    192a:	9a 85       	ldd	r25, Y+10	; 0x0a
    192c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1930:	dc 01       	movw	r26, r24
    1932:	cb 01       	movw	r24, r22
    1934:	9e 83       	std	Y+6, r25	; 0x06
    1936:	8d 83       	std	Y+5, r24	; 0x05
    1938:	8d 81       	ldd	r24, Y+5	; 0x05
    193a:	9e 81       	ldd	r25, Y+6	; 0x06
    193c:	9a 83       	std	Y+2, r25	; 0x02
    193e:	89 83       	std	Y+1, r24	; 0x01
    1940:	89 81       	ldd	r24, Y+1	; 0x01
    1942:	9a 81       	ldd	r25, Y+2	; 0x02
    1944:	01 97       	sbiw	r24, 0x01	; 1
    1946:	f1 f7       	brne	.-4      	; 0x1944 <main+0x1e2>
    1948:	9a 83       	std	Y+2, r25	; 0x02
    194a:	89 83       	std	Y+1, r24	; 0x01
		{
			_delay_ms(30);
			if (!(PINB & (1 << PB7)))  				//second check due to switch de-bouncing
    194c:	e6 e3       	ldi	r30, 0x36	; 54
    194e:	f0 e0       	ldi	r31, 0x00	; 0
    1950:	80 81       	ld	r24, Z
    1952:	88 23       	and	r24, r24
    1954:	ec f0       	brlt	.+58     	; 0x1990 <main+0x22e>
			{
				if(one_press == 0)
    1956:	80 91 72 00 	lds	r24, 0x0072
    195a:	88 23       	and	r24, r24
    195c:	c9 f4       	brne	.+50     	; 0x1990 <main+0x22e>
				{
					if(((TCCR1B & 0x07)==0))  		//accept toggle when timer is off
    195e:	ee e4       	ldi	r30, 0x4E	; 78
    1960:	f0 e0       	ldi	r31, 0x00	; 0
    1962:	80 81       	ld	r24, Z
    1964:	88 2f       	mov	r24, r24
    1966:	90 e0       	ldi	r25, 0x00	; 0
    1968:	87 70       	andi	r24, 0x07	; 7
    196a:	90 70       	andi	r25, 0x00	; 0
    196c:	00 97       	sbiw	r24, 0x00	; 0
    196e:	81 f4       	brne	.+32     	; 0x1990 <main+0x22e>
					{
						toggle_mode =!toggle_mode; //toggle between count up and count down modes
    1970:	80 91 73 00 	lds	r24, 0x0073
    1974:	1f 86       	std	Y+15, r1	; 0x0f
    1976:	88 23       	and	r24, r24
    1978:	11 f4       	brne	.+4      	; 0x197e <main+0x21c>
    197a:	81 e0       	ldi	r24, 0x01	; 1
    197c:	8f 87       	std	Y+15, r24	; 0x0f
    197e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1980:	80 93 73 00 	sts	0x0073, r24
						one_press = 1;
    1984:	81 e0       	ldi	r24, 0x01	; 1
    1986:	80 93 72 00 	sts	0x0072, r24
    198a:	02 c0       	rjmp	.+4      	; 0x1990 <main+0x22e>
				}
			}
		}
		else
		{
			  one_press = 0;				// button is released reset the button flag to value 0 again.
    198c:	10 92 72 00 	sts	0x0072, r1
		}

		Select_Mode(); 						//function to select count up mode or count down mode
    1990:	0e 94 b6 0a 	call	0x156c	; 0x156c <Select_Mode>
		Seven_Segment_Multiplexed_Display_Time();  		//display six multiplexed 7-segment time
    1994:	0e 94 81 06 	call	0xd02	; 0xd02 <Seven_Segment_Multiplexed_Display_Time>
    1998:	43 cf       	rjmp	.-378    	; 0x1820 <main+0xbe>

0000199a <__udivmodqi4>:
    199a:	99 1b       	sub	r25, r25
    199c:	79 e0       	ldi	r23, 0x09	; 9
    199e:	04 c0       	rjmp	.+8      	; 0x19a8 <__udivmodqi4_ep>

000019a0 <__udivmodqi4_loop>:
    19a0:	99 1f       	adc	r25, r25
    19a2:	96 17       	cp	r25, r22
    19a4:	08 f0       	brcs	.+2      	; 0x19a8 <__udivmodqi4_ep>
    19a6:	96 1b       	sub	r25, r22

000019a8 <__udivmodqi4_ep>:
    19a8:	88 1f       	adc	r24, r24
    19aa:	7a 95       	dec	r23
    19ac:	c9 f7       	brne	.-14     	; 0x19a0 <__udivmodqi4_loop>
    19ae:	80 95       	com	r24
    19b0:	08 95       	ret

000019b2 <__divmodhi4>:
    19b2:	97 fb       	bst	r25, 7
    19b4:	09 2e       	mov	r0, r25
    19b6:	07 26       	eor	r0, r23
    19b8:	0a d0       	rcall	.+20     	; 0x19ce <__divmodhi4_neg1>
    19ba:	77 fd       	sbrc	r23, 7
    19bc:	04 d0       	rcall	.+8      	; 0x19c6 <__divmodhi4_neg2>
    19be:	0c d0       	rcall	.+24     	; 0x19d8 <__udivmodhi4>
    19c0:	06 d0       	rcall	.+12     	; 0x19ce <__divmodhi4_neg1>
    19c2:	00 20       	and	r0, r0
    19c4:	1a f4       	brpl	.+6      	; 0x19cc <__divmodhi4_exit>

000019c6 <__divmodhi4_neg2>:
    19c6:	70 95       	com	r23
    19c8:	61 95       	neg	r22
    19ca:	7f 4f       	sbci	r23, 0xFF	; 255

000019cc <__divmodhi4_exit>:
    19cc:	08 95       	ret

000019ce <__divmodhi4_neg1>:
    19ce:	f6 f7       	brtc	.-4      	; 0x19cc <__divmodhi4_exit>
    19d0:	90 95       	com	r25
    19d2:	81 95       	neg	r24
    19d4:	9f 4f       	sbci	r25, 0xFF	; 255
    19d6:	08 95       	ret

000019d8 <__udivmodhi4>:
    19d8:	aa 1b       	sub	r26, r26
    19da:	bb 1b       	sub	r27, r27
    19dc:	51 e1       	ldi	r21, 0x11	; 17
    19de:	07 c0       	rjmp	.+14     	; 0x19ee <__udivmodhi4_ep>

000019e0 <__udivmodhi4_loop>:
    19e0:	aa 1f       	adc	r26, r26
    19e2:	bb 1f       	adc	r27, r27
    19e4:	a6 17       	cp	r26, r22
    19e6:	b7 07       	cpc	r27, r23
    19e8:	10 f0       	brcs	.+4      	; 0x19ee <__udivmodhi4_ep>
    19ea:	a6 1b       	sub	r26, r22
    19ec:	b7 0b       	sbc	r27, r23

000019ee <__udivmodhi4_ep>:
    19ee:	88 1f       	adc	r24, r24
    19f0:	99 1f       	adc	r25, r25
    19f2:	5a 95       	dec	r21
    19f4:	a9 f7       	brne	.-22     	; 0x19e0 <__udivmodhi4_loop>
    19f6:	80 95       	com	r24
    19f8:	90 95       	com	r25
    19fa:	bc 01       	movw	r22, r24
    19fc:	cd 01       	movw	r24, r26
    19fe:	08 95       	ret

00001a00 <__prologue_saves__>:
    1a00:	2f 92       	push	r2
    1a02:	3f 92       	push	r3
    1a04:	4f 92       	push	r4
    1a06:	5f 92       	push	r5
    1a08:	6f 92       	push	r6
    1a0a:	7f 92       	push	r7
    1a0c:	8f 92       	push	r8
    1a0e:	9f 92       	push	r9
    1a10:	af 92       	push	r10
    1a12:	bf 92       	push	r11
    1a14:	cf 92       	push	r12
    1a16:	df 92       	push	r13
    1a18:	ef 92       	push	r14
    1a1a:	ff 92       	push	r15
    1a1c:	0f 93       	push	r16
    1a1e:	1f 93       	push	r17
    1a20:	cf 93       	push	r28
    1a22:	df 93       	push	r29
    1a24:	cd b7       	in	r28, 0x3d	; 61
    1a26:	de b7       	in	r29, 0x3e	; 62
    1a28:	ca 1b       	sub	r28, r26
    1a2a:	db 0b       	sbc	r29, r27
    1a2c:	0f b6       	in	r0, 0x3f	; 63
    1a2e:	f8 94       	cli
    1a30:	de bf       	out	0x3e, r29	; 62
    1a32:	0f be       	out	0x3f, r0	; 63
    1a34:	cd bf       	out	0x3d, r28	; 61
    1a36:	09 94       	ijmp

00001a38 <__epilogue_restores__>:
    1a38:	2a 88       	ldd	r2, Y+18	; 0x12
    1a3a:	39 88       	ldd	r3, Y+17	; 0x11
    1a3c:	48 88       	ldd	r4, Y+16	; 0x10
    1a3e:	5f 84       	ldd	r5, Y+15	; 0x0f
    1a40:	6e 84       	ldd	r6, Y+14	; 0x0e
    1a42:	7d 84       	ldd	r7, Y+13	; 0x0d
    1a44:	8c 84       	ldd	r8, Y+12	; 0x0c
    1a46:	9b 84       	ldd	r9, Y+11	; 0x0b
    1a48:	aa 84       	ldd	r10, Y+10	; 0x0a
    1a4a:	b9 84       	ldd	r11, Y+9	; 0x09
    1a4c:	c8 84       	ldd	r12, Y+8	; 0x08
    1a4e:	df 80       	ldd	r13, Y+7	; 0x07
    1a50:	ee 80       	ldd	r14, Y+6	; 0x06
    1a52:	fd 80       	ldd	r15, Y+5	; 0x05
    1a54:	0c 81       	ldd	r16, Y+4	; 0x04
    1a56:	1b 81       	ldd	r17, Y+3	; 0x03
    1a58:	aa 81       	ldd	r26, Y+2	; 0x02
    1a5a:	b9 81       	ldd	r27, Y+1	; 0x01
    1a5c:	ce 0f       	add	r28, r30
    1a5e:	d1 1d       	adc	r29, r1
    1a60:	0f b6       	in	r0, 0x3f	; 63
    1a62:	f8 94       	cli
    1a64:	de bf       	out	0x3e, r29	; 62
    1a66:	0f be       	out	0x3f, r0	; 63
    1a68:	cd bf       	out	0x3d, r28	; 61
    1a6a:	ed 01       	movw	r28, r26
    1a6c:	08 95       	ret

00001a6e <_exit>:
    1a6e:	f8 94       	cli

00001a70 <__stop_program>:
    1a70:	ff cf       	rjmp	.-2      	; 0x1a70 <__stop_program>
